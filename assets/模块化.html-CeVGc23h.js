import{_ as e,o as i,c as t,e as a}from"./app-Bmelea3n.js";const s={},n=a(`<h2 id="简介" tabindex="-1"><a class="header-anchor" href="#简介"><span>简介</span></a></h2><h2 id="命名空间模式" tabindex="-1"><a class="header-anchor" href="#命名空间模式"><span>命名空间模式</span></a></h2><p>在早期的JavaScript开发中,为了解决<code>命名冲突</code>的问题,开发者会使用特殊的代码约定,例如为所有变量和函数添加特定的前缀.</p><p>这种代码组织的模式现在被称为<a href="https://juejin.cn/post/6844903895408312333" target="_blank" rel="noopener noreferrer"><code>命名空间模式</code></a>.</p><p>例如,假设有两个全局变量或函数都叫做<code>myFunction</code>,为了避免命名冲突,可以在它们前面加上特定的前缀,如下所示:</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">var</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> myApplication_myFunction1</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> function</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">() {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">  // ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">};</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">var</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> myApplication_myFunction2</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> function</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">() {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">  // ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">};</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这样,通过在变量和函数名前添加特定的前缀(如<code>myApplication_</code>),可以降低命名冲突的概率.</p><p>然而,这种方法并没有减少全局变量的数量,当应用程序规模扩大时,可能会产生大量的全局变量,导致代码难以维护.</p><h2 id="参考" tabindex="-1"><a class="header-anchor" href="#参考"><span>参考</span></a></h2><ul><li><a href="https://www.perplexity.ai/search/rollup-js-tXNbXkHgQBafO1_mTQHwDw?s=c" target="_blank" rel="noopener noreferrer">js模块化相关提问</a></li><li><a href="https://yingkaixiang.github.io/blog/JavaScript/module-history.html" target="_blank" rel="noopener noreferrer">JavaScript模块化的演变史</a></li></ul>`,10),r=[n];function l(p,o){return i(),t("div",null,r)}const c=e(s,[["render",l],["__file","模块化.html.vue"]]),d=JSON.parse('{"path":"/Programming/Frontend/Javascript/%E6%A8%A1%E5%9D%97%E5%8C%96.html","title":"模块化","lang":"zh-CN","frontmatter":{"title":"模块化","comment":false,"editLink":false,"prev":false,"next":false,"description":"简介 命名空间模式 在早期的JavaScript开发中,为了解决命名冲突的问题,开发者会使用特殊的代码约定,例如为所有变量和函数添加特定的前缀. 这种代码组织的模式现在被称为命名空间模式. 例如,假设有两个全局变量或函数都叫做myFunction,为了避免命名冲突,可以在它们前面加上特定的前缀,如下所示: 这样,通过在变量和函数名前添加特定的前缀(如m...","head":[["meta",{"property":"og:url","content":"https://vuepress-theme-hope-docs-demo.netlify.app/Programming/Frontend/Javascript/%E6%A8%A1%E5%9D%97%E5%8C%96.html"}],["meta",{"property":"og:site_name","content":"一星的臭弟弟"}],["meta",{"property":"og:title","content":"模块化"}],["meta",{"property":"og:description","content":"简介 命名空间模式 在早期的JavaScript开发中,为了解决命名冲突的问题,开发者会使用特殊的代码约定,例如为所有变量和函数添加特定的前缀. 这种代码组织的模式现在被称为命名空间模式. 例如,假设有两个全局变量或函数都叫做myFunction,为了避免命名冲突,可以在它们前面加上特定的前缀,如下所示: 这样,通过在变量和函数名前添加特定的前缀(如m..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-07-03T23:01:39.000Z"}],["meta",{"property":"article:author","content":"Cruldra"}],["meta",{"property":"article:modified_time","content":"2024-07-03T23:01:39.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"模块化\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-07-03T23:01:39.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Cruldra\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":2,"title":"简介","slug":"简介","link":"#简介","children":[]},{"level":2,"title":"命名空间模式","slug":"命名空间模式","link":"#命名空间模式","children":[]},{"level":2,"title":"参考","slug":"参考","link":"#参考","children":[]}],"git":{"createdTime":1720047699000,"updatedTime":1720047699000,"contributors":[{"name":"cruldra","email":"cruldra@gmail.com","commits":1}]},"readingTime":{"minutes":0.86,"words":257},"filePathRelative":"Programming/Frontend/Javascript/模块化.md","localizedDate":"2024年7月3日","autoDesc":true}');export{c as comp,d as data};
