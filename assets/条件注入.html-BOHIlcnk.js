import{_ as n,r as e,o as l,c as t,a as i,b as s,d as h,w as d,e as p}from"./app-Bmelea3n.js";const r={},k=i("h2",{id:"简介",tabindex:"-1"},[i("a",{class:"header-anchor",href:"#简介"},[i("span",null,"简介")])],-1),o=i("code",null,"条件注入",-1),c=i("strong",null,"仅在满足特定条件时",-1),g=i("code",null,"Spring",-1),B=i("code",null,"bean",-1),u=p(`<h2 id="常用的条件注解" tabindex="-1"><a class="header-anchor" href="#常用的条件注解"><span>常用的条件注解</span></a></h2><h3 id="conditionalonproperty" tabindex="-1"><a class="header-anchor" href="#conditionalonproperty"><span>@ConditionalOnProperty</span></a></h3><p>仅在指定的属性存在时才注入<code>bean</code></p><div class="language-kotlin line-numbers-mode" data-highlighter="shiki" data-ext="kotlin" data-title="kotlin" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;">@ConditionalOnProperty</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    prefix </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> &quot;sms&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    name </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> [</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;access-key-id&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;access-key-secret&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;"> AliyunSmsAutoConfiguration</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面的这个配置仅在<code>application.yml</code>中配置了<code>sms</code>相关的几个属性时才会启用</p><h3 id="conditionalonclass" tabindex="-1"><a class="header-anchor" href="#conditionalonclass"><span>@ConditionalOnClass</span></a></h3><p>仅在<code>classpath</code>中存在指定的类存在时才注入<code>bean</code></p><div class="language-kotlin line-numbers-mode" data-highlighter="shiki" data-ext="kotlin" data-title="kotlin" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;">@ConditionalOnClass</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(name </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> [</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;org.springframework.data.redis.core.RedisTemplate&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">])</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;"> RedisAutoConfiguration</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面的这个配置仅在<code>classpath</code>中存在<code>org.springframework.data.redis.core.RedisTemplate</code>类时才会启用</p><h3 id="conditionalonmissingclass" tabindex="-1"><a class="header-anchor" href="#conditionalonmissingclass"><span>@ConditionalOnMissingClass</span></a></h3><p>和<code>@ConditionalOnClass</code>相反,标记了这个注解的配置类只有在<code>classpath</code>中不存在指定的类存在时才生效</p><h3 id="conditionalonbean" tabindex="-1"><a class="header-anchor" href="#conditionalonbean"><span>@ConditionalOnBean</span></a></h3><p>仅在指定的<code>bean</code>存在时才注入<code>bean</code></p><div class="language-kotlin line-numbers-mode" data-highlighter="shiki" data-ext="kotlin" data-title="kotlin" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;">@ConditionalOnBean</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(name </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> [</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;redisTemplate&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">])</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;"> RedisAutoConfiguration</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面这个配置仅在<code>IoC</code>容器中存在名为<code>redisTemplate</code>的<code>bean</code>时才会启用</p><p>也可以指定一个注解条件,比如说仅在某个配置类或者<code>SpringBootApplication</code>上标记了<code>@EnableRedis</code>注解时才会启用</p><div class="language-kotlin line-numbers-mode" data-highlighter="shiki" data-ext="kotlin" data-title="kotlin" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;">@ConditionalOnBean</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">annotation</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> [EnableRedis::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">class</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">])</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;"> RedisAutoConfiguration</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="conditionalonexpression" tabindex="-1"><a class="header-anchor" href="#conditionalonexpression"><span>@ConditionalOnExpression</span></a></h3><p>仅在指定的<code>SpEL</code>表达式为<code>true</code>时才注入<code>bean</code></p><div class="language-kotlin line-numbers-mode" data-highlighter="shiki" data-ext="kotlin" data-title="kotlin" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;">@ConditionalOnExpression</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2;">\\$</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">{sms.enabled:true} == true&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;"> AliyunSmsAutoConfiguration</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面的配置仅在<code>application.yml</code>中配置了<code>sms.enabled</code>属性且值为<code>true</code>时才会启用</p><h3 id="conditionalonwebapplication" tabindex="-1"><a class="header-anchor" href="#conditionalonwebapplication"><span>@ConditionalOnWebApplication</span></a></h3><p>仅在当前应用是一个<code>web</code>应用时才注入<code>bean</code></p><div class="language-kotlin line-numbers-mode" data-highlighter="shiki" data-ext="kotlin" data-title="kotlin" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;">@ConditionalOnWebApplication</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;"> WebAutoConfiguration</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面的配置仅在当前应用是一个<code>web</code>应用时才会启用</p><h2 id="自定义条件注解" tabindex="-1"><a class="header-anchor" href="#自定义条件注解"><span>自定义条件注解</span></a></h2><p>我们也可以自己定义一个条件注解,比如说我们要实现一个名为<code>@ConditionOnJdbc</code>的条件注解,它表示仅在当前应用使用了<code>JDBC</code>时才注入<code>bean</code></p><p>首先我们需要创建一个自定义的<a href="https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/context/annotation/Condition.html" target="_blank" rel="noopener noreferrer">条件</a></p><div class="language-kotlin line-numbers-mode" data-highlighter="shiki" data-ext="kotlin" data-title="kotlin" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;"> JdbcEnableCondition</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;">Condition</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    override</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> matches</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(context: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;">ConditionContext</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, metadata: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;">AnnotatedTypeMetadata</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">): </span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;">Boolean</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">        val</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> hasDataSourceProperties </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> (context.environment.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">containsProperty</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;spring.datasource.url&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">                &amp;&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> context.environment.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">containsProperty</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;spring.datasource.username&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">                &amp;&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> context.environment.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">containsProperty</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;spring.datasource.password&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">))</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">        // 检查java.sql.Driver是否有子类</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">        var</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> hasDriverSubclass </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> false</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">        val</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> drivers </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> DriverManager.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">getDrivers</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">()</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">        if</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> (drivers.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">hasMoreElements</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">()) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">            hasDriverSubclass </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> true</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">        }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">        return</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> hasDataSourceProperties </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">&amp;&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> hasDriverSubclass</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面的代码中完成了两个条件:</p><ol><li><code>spring.datasource.url</code>、<code>spring.datasource.username</code>和<code>spring.datasource.password</code>这三个属性是否存在</li><li><code>java.sql.Driver</code>是否有子类,也就是说当前应用是否引入了<code>JDBC</code>驱动</li></ol><p>然后我们需要创建一个注解,并将上面的条件绑定到这个注解上</p><div class="language-kotlin line-numbers-mode" data-highlighter="shiki" data-ext="kotlin" data-title="kotlin" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;">@Target</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(CLASS, FUNCTION)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;">@Retention</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(RUNTIME)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;">@Conditional</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(JdbcEnableCondition::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">class</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">annotation</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;"> ConditionOnJdbc</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来我们就可以在配置类上使用这个注解了</p><div class="language-kotlin line-numbers-mode" data-highlighter="shiki" data-ext="kotlin" data-title="kotlin" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;">@ConditionOnJdbc</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;"> JdbcAutoConfiguration</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面的配置仅在当前应用使用了<code>JDBC</code>时才会启用</p>`,36);function y(m,b){const a=e("RouteLink");return l(),t("div",null,[k,i("p",null,[o,s("是指"),c,s("才向"),g,s("的"),h(a,{to:"/Programming/SpringBoot/IoC%E5%AE%B9%E5%99%A8.html"},{default:d(()=>[s("IoC容器")]),_:1}),s("中注入一个"),B]),u])}const C=n(r,[["render",y],["__file","条件注入.html.vue"]]),A=JSON.parse('{"path":"/Programming/SpringBoot/%E6%9D%A1%E4%BB%B6%E6%B3%A8%E5%85%A5.html","title":"条件注入","lang":"zh-CN","frontmatter":{"title":"条件注入","comment":false,"editLink":false,"prev":false,"next":false,"description":"简介 条件注入是指仅在满足特定条件时才向Spring的中注入一个bean 常用的条件注解 @ConditionalOnProperty 仅在指定的属性存在时才注入bean 上面的这个配置仅在application.yml中配置了sms相关的几个属性时才会启用 @ConditionalOnClass 仅在classpath中存在指定的类存在时才注入bea...","head":[["meta",{"property":"og:url","content":"https://vuepress-theme-hope-docs-demo.netlify.app/Programming/SpringBoot/%E6%9D%A1%E4%BB%B6%E6%B3%A8%E5%85%A5.html"}],["meta",{"property":"og:site_name","content":"一星的臭弟弟"}],["meta",{"property":"og:title","content":"条件注入"}],["meta",{"property":"og:description","content":"简介 条件注入是指仅在满足特定条件时才向Spring的中注入一个bean 常用的条件注解 @ConditionalOnProperty 仅在指定的属性存在时才注入bean 上面的这个配置仅在application.yml中配置了sms相关的几个属性时才会启用 @ConditionalOnClass 仅在classpath中存在指定的类存在时才注入bea..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-07-03T23:01:39.000Z"}],["meta",{"property":"article:author","content":"Cruldra"}],["meta",{"property":"article:modified_time","content":"2024-07-03T23:01:39.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"条件注入\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-07-03T23:01:39.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Cruldra\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":2,"title":"简介","slug":"简介","link":"#简介","children":[]},{"level":2,"title":"常用的条件注解","slug":"常用的条件注解","link":"#常用的条件注解","children":[{"level":3,"title":"@ConditionalOnProperty","slug":"conditionalonproperty","link":"#conditionalonproperty","children":[]},{"level":3,"title":"@ConditionalOnClass","slug":"conditionalonclass","link":"#conditionalonclass","children":[]},{"level":3,"title":"@ConditionalOnMissingClass","slug":"conditionalonmissingclass","link":"#conditionalonmissingclass","children":[]},{"level":3,"title":"@ConditionalOnBean","slug":"conditionalonbean","link":"#conditionalonbean","children":[]},{"level":3,"title":"@ConditionalOnExpression","slug":"conditionalonexpression","link":"#conditionalonexpression","children":[]},{"level":3,"title":"@ConditionalOnWebApplication","slug":"conditionalonwebapplication","link":"#conditionalonwebapplication","children":[]}]},{"level":2,"title":"自定义条件注解","slug":"自定义条件注解","link":"#自定义条件注解","children":[]}],"git":{"createdTime":1720047699000,"updatedTime":1720047699000,"contributors":[{"name":"cruldra","email":"cruldra@gmail.com","commits":1}]},"readingTime":{"minutes":2.06,"words":619},"filePathRelative":"Programming/SpringBoot/条件注入.md","localizedDate":"2024年7月3日","autoDesc":true}');export{C as comp,A as data};
