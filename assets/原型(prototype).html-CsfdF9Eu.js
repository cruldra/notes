import{_ as i,r as s,o as p,c as r,d as o,e}from"./app-Bmelea3n.js";const a={},c=e(`<h2 id="简介" tabindex="-1"><a class="header-anchor" href="#简介"><span>简介</span></a></h2><p><a href="https://developer.mozilla.org/zh-CN/docs/Learn/JavaScript/Objects/Object_prototypes" target="_blank" rel="noopener noreferrer">对象原型</a>是<code>js</code>中用来实现继承和共享属性或方法的机制.</p><p>每个<code>类(构造函数)</code>都有一个静态属性<code>prototype</code>,这个属性是一个对象,包含了所有实例共享的属性和方法.</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;">Object</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#E06C75;">prototype</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;">Array</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#E06C75;">prototype</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#E06C75;">prototype</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后<code>类(构造函数)</code>在使用<code>new</code>新建一个实例的时候会将这个新实例的<code>__prototype__</code>属性指向这个静态的<code>prototype</code>对象.</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;"> obj</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> Object</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">()</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">//obj.__prototype__ === Object.prototype</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>最后就形成了:</p><ol><li>每个对象都有一个<code>__prototype__</code>属性,指向它的原型对象</li><li>也就是<strong>构造这个对象的那个构造函数</strong>的静态<code>prototype</code>属性</li></ol><p>它是唯一的,也就是说相同构造函数构造出来的实例的<code>__prototype__</code>是相同的</p>`,9),d=e('<ol start="3"><li><p>第一条也适用于这个原型对象,所以就形成了一个原型链,直到对象的<code>__prototype__</code>为<code>null</code>为止,因为<code>null</code>没有原型对象</p></li><li><p>如果尝试访问<code>实例对象</code>上不存在的属性或方法,<code>js</code>会尝试在原型链上查找,直到找到为止,如果找不到就返回<code>undefined</code>,例如:</p></li></ol>',1),n=e("<p>从上面的例子中可以看到,<code>Child</code>类没有实现<code>say</code>方法,它最终调用的是原型链上的<code>Parent</code>类的<code>say</code>方法.这就是<code>js</code>中的继承</p><p>那<code>Parent</code>类也没定义<code>toString</code>方法,为什么<code>child.toString()</code>不会报错呢?</p><p>这是因为<code>js</code>中所有对象的原型链最终都会指向<code>Object.prototype</code>,而<code>Object.prototype</code>上有<code>toString</code> 方法,所以<code>child.toString()</code>最终调用的是<code>Object.prototype</code>上的<code>toString</code>方法</p><p><code>Object.prototype</code>也不是原型链的最后一个,它应该是倒数第二个,最后一个是<code>null</code>,也就是<code>Object.prototype</code>的<code>__prototype__</code>=<code>null</code></p>",4);function l(h,k){const t=s("SandPack");return p(),r("div",null,[c,o(t,{title:"%E7%A4%BA%E4%BE%8B",template:"react-ts",files:"eJyNkcFOwzAMhl/F6qmVplX0CGklNO3AicOOFFVZlkJZl5TUFUNV7zwBT8CVx4LnIGkb1k4dw5fYVj7bv107/nVRzLHcO5dOtiukQqirki9onq8p285AB8s05Qxbd4UUeQOpkjuIHcUpw9i5ikUs+L6FNzylVY7gehBGUMcCtDEpSoQ7uX66mEHJ8VY79xD+FnQFfwGd1F1czztmAssE/2Sycvlc0bxsuZs+GLGpTvBpqOtmqXFLiw1B9sjZtvusv45kGxvUco3+eZIUSqJMEgjDsBcwb1P4WtiZjshgCjWbOaQGoO8DzblCF8Y7OtMaTPYU0ZdvukdxrJQAEh2akkLxCAiTGx51izEj640MC+qwbpWgXKHKxIPrNcRvGSC+qTBdUDN2FDPpaQFQ2zNOtCDrClH2x7MmxSLP2DasB3dsoq+3j+/3T+J3RHRmtr8vMxorOCed+NrRa46F0/wAbwcwMA==",options:"eJyrrgUAAXUA+Q==",customSetup:"eJyrrgUAAXUA+Q=="}),d,o(t,{title:"%E7%A4%BA%E4%BE%8B",template:"react-ts",files:"eJyNUc1OwzAMfhWrl3XStN4hq4Qm7ohxoxyy1GXVuqRKHDE09d1J0mZtJybIyUn8/fjzJcme2nZN5pw8JPWpVZrgYg1uedPsuTiuwF2eqwoFhXJHnLCDSqsTFIlGLqhIHgtZSNFwY+CFa5SOopDgjlDSkLaClE6X8dEfOtRmLfkJYQOLNmAW/W/nuXxh+Pcco5GslrHd/4+QgOodbA91UwKeCWX5bz/Gtuie7hgUnvJGDM8hqxIrbhsCR7fJZzLwHmArMEjB04ejigmmEr96p+lyUB1AbqxXNAG1C+UMZqUTrCWWcxCpHelafkbk23i/C58SBKdOzvXOBgnRRCNp6FqHvUySmssNTdHQtfO61mGLLB8ZWKsxByZUifnEjzMzScndLrfcHcsCCFjmKe4wjq49R59vRLK9JVISlNw2tThuegk3bzfFsaxvy//WGc15sclefvXKMleEaJLuB1C8JzA=",options:"eJyrrgUAAXUA+Q==",customSetup:"eJyrrgUAAXUA+Q=="}),n])}const m=i(a,[["render",l],["__file","原型(prototype).html.vue"]]),g=JSON.parse('{"path":"/Programming/Frontend/Javascript/%E5%8E%9F%E5%9E%8B(prototype).html","title":"原型(prototype)","lang":"zh-CN","frontmatter":{"title":"原型(prototype)","comment":false,"editLink":false,"prev":false,"next":false,"description":"简介 对象原型是js中用来实现继承和共享属性或方法的机制. 每个类(构造函数)都有一个静态属性prototype,这个属性是一个对象,包含了所有实例共享的属性和方法. 然后类(构造函数)在使用new新建一个实例的时候会将这个新实例的__prototype__属性指向这个静态的prototype对象. 最后就形成了: 每个对象都有一个__prototyp...","head":[["meta",{"property":"og:url","content":"https://vuepress-theme-hope-docs-demo.netlify.app/Programming/Frontend/Javascript/%E5%8E%9F%E5%9E%8B(prototype).html"}],["meta",{"property":"og:site_name","content":"一星的臭弟弟"}],["meta",{"property":"og:title","content":"原型(prototype)"}],["meta",{"property":"og:description","content":"简介 对象原型是js中用来实现继承和共享属性或方法的机制. 每个类(构造函数)都有一个静态属性prototype,这个属性是一个对象,包含了所有实例共享的属性和方法. 然后类(构造函数)在使用new新建一个实例的时候会将这个新实例的__prototype__属性指向这个静态的prototype对象. 最后就形成了: 每个对象都有一个__prototyp..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-07-03T23:01:39.000Z"}],["meta",{"property":"article:author","content":"Cruldra"}],["meta",{"property":"article:modified_time","content":"2024-07-03T23:01:39.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"原型(prototype)\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-07-03T23:01:39.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Cruldra\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":2,"title":"简介","slug":"简介","link":"#简介","children":[]}],"git":{"createdTime":1720047699000,"updatedTime":1720047699000,"contributors":[{"name":"cruldra","email":"cruldra@gmail.com","commits":1}]},"readingTime":{"minutes":2.06,"words":618},"filePathRelative":"Programming/Frontend/Javascript/原型(prototype).md","localizedDate":"2024年7月3日","autoDesc":true}');export{m as comp,g as data};
