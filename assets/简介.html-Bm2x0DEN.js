import{_ as s,o as i,c as a,e as n}from"./app-Bmelea3n.js";const e={},l=n(`<h2 id="静态调度" tabindex="-1"><a class="header-anchor" href="#静态调度"><span>静态调度</span></a></h2><p><code>静态调度</code>是指在<code>Spring Boot</code>应用程序启动时就已经确定了任务的执行时间,这种调度方式适用于那些执行时机固定的、不会变化的任务</p><div class="language-kotlin line-numbers-mode" data-highlighter="shiki" data-ext="kotlin" data-title="kotlin" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;">@Component</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;"> HiUserFreeAccountCron</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">private</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> val</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> userFreeAccountService: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;">com</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.hichat.api.service.HiUserFreeAccountService) {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;">    @Scheduled</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(cron </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> &quot;0 0 0 * * *&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">// 每天凌晨重置免费计划的用量</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> resetAllFreePoints</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">        userFreeAccountService.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">resetAllFreePoints</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="动态调度" tabindex="-1"><a class="header-anchor" href="#动态调度"><span>动态调度</span></a></h2><p><code>动态调度</code>是指在<code>Spring Boot</code>应用程序运行时根据一定的规则来决定任务的执行时间,这种调度方式适用于那些执行时机不固定的、会变化的任务</p><p>一般我们将任务的执行时间保存在数据库中,然后在应用程序启动时读取这些数据,再根据这些数据来动态地调度任务</p><div class="language-kotlin line-numbers-mode" data-highlighter="shiki" data-ext="kotlin" data-title="kotlin" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;">@Component</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;"> HiUserFreeAccountCron</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    private</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> val</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> userFreeAccountService: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;">HiUserFreeAccountService</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    private</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> val</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> taskScheduler: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;">TaskScheduler</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">    init</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">        scheduleResetAllFreePointsTask</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    private</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> resetAllFreePoints</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">() {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">        println</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;Reset all free points&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">        userFreeAccountService.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">resetAllFreePoints</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    private</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> scheduleResetAllFreePointsTask</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">        val</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> cronExpression: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> userFreeAccountService.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">getResetCronExpression</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">()</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">        val</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> trigger </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> CronTrigger</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(cronExpression)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">        taskScheduler.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">schedule</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">resetAllFreePoints</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, trigger)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="常用工具" tabindex="-1"><a class="header-anchor" href="#常用工具"><span>常用工具</span></a></h2><ul><li><a href="https://crontab.cronhub.io/" target="_blank" rel="noopener noreferrer">Cron expression generator by Cronhub</a></li><li><a href="https://codepen.io/etienne582/pen/xxOgwzX" target="_blank" rel="noopener noreferrer">Spring Schedule Cron Generator</a></li></ul>`,9),t=[l];function h(r,p){return i(),a("div",null,t)}const d=s(e,[["render",h],["__file","简介.html.vue"]]),c=JSON.parse('{"path":"/Programming/SpringBoot/Cron/%E7%AE%80%E4%BB%8B.html","title":"简介","lang":"zh-CN","frontmatter":{"title":"简介","comment":false,"editLink":false,"prev":false,"next":false,"description":"静态调度 静态调度是指在Spring Boot应用程序启动时就已经确定了任务的执行时间,这种调度方式适用于那些执行时机固定的、不会变化的任务 动态调度 动态调度是指在Spring Boot应用程序运行时根据一定的规则来决定任务的执行时间,这种调度方式适用于那些执行时机不固定的、会变化的任务 一般我们将任务的执行时间保存在数据库中,然后在应用程序启动时读...","head":[["meta",{"property":"og:url","content":"https://vuepress-theme-hope-docs-demo.netlify.app/Programming/SpringBoot/Cron/%E7%AE%80%E4%BB%8B.html"}],["meta",{"property":"og:site_name","content":"一星的臭弟弟"}],["meta",{"property":"og:title","content":"简介"}],["meta",{"property":"og:description","content":"静态调度 静态调度是指在Spring Boot应用程序启动时就已经确定了任务的执行时间,这种调度方式适用于那些执行时机固定的、不会变化的任务 动态调度 动态调度是指在Spring Boot应用程序运行时根据一定的规则来决定任务的执行时间,这种调度方式适用于那些执行时机不固定的、会变化的任务 一般我们将任务的执行时间保存在数据库中,然后在应用程序启动时读..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-07-03T23:01:39.000Z"}],["meta",{"property":"article:author","content":"Cruldra"}],["meta",{"property":"article:modified_time","content":"2024-07-03T23:01:39.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"简介\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-07-03T23:01:39.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Cruldra\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":2,"title":"静态调度","slug":"静态调度","link":"#静态调度","children":[]},{"level":2,"title":"动态调度","slug":"动态调度","link":"#动态调度","children":[]},{"level":2,"title":"常用工具","slug":"常用工具","link":"#常用工具","children":[]}],"git":{"createdTime":1720047699000,"updatedTime":1720047699000,"contributors":[{"name":"cruldra","email":"cruldra@gmail.com","commits":1}]},"readingTime":{"minutes":0.89,"words":266},"filePathRelative":"Programming/SpringBoot/Cron/简介.md","localizedDate":"2024年7月3日","autoDesc":true}');export{d as comp,c as data};
