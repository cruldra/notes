import{_ as h,r as k,o as r,c as p,d,w as a,e as t,b as s,a as i}from"./app-Bmelea3n.js";const o={},g=t('<h2 id="简介" tabindex="-1"><a class="header-anchor" href="#简介"><span>简介</span></a></h2><p><code>表单验证</code>是一个非常常见的需求,它是指<strong>对用户提交的表单数据进行验证,确保数据的合法性</strong></p><p><a href="https://jcp.org/en/jsr/detail?id=303" target="_blank" rel="noopener noreferrer"><code>JSR-303</code></a>中定义了一套<code>Java</code>的<code>Bean</code> 验证规范(1.0),<a href="https://hibernate.org/validator/" target="_blank" rel="noopener noreferrer">Hibernate Validator</a>是这套规范的一个具体实现.</p><p><a href="https://jcp.org/en/jsr/detail?id=349" target="_blank" rel="noopener noreferrer"><code>JSR-349</code></a>和<a href="https://jcp.org/en/jsr/detail?id=380" target="_blank" rel="noopener noreferrer"><code>JSR-380</code></a>分别是<code>JSR-303</code> 的<code>1.1</code>和<code>2.0</code>版本.</p><p><a href="https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-starter-validation/3.2.1" target="_blank" rel="noopener noreferrer">Spring Boot Starter Validation</a> 中集成了<code>Hibernate Validator</code>,并且提供了一套自动配置,可以让我们非常方便的使用<code>Hibernate Validator</code>来验证表单数据.</p><h2 id="验证注解" tabindex="-1"><a class="header-anchor" href="#验证注解"><span>验证注解</span></a></h2><p>得益于<code>Spring Boot</code>的高度集成,大部分情况下使用这套规范其实就是用它提供的一系列注解来定义验证规则,然后在<code>Controller</code> 中使用<code>@Valid</code>注解来启用验证.</p><p>下面这张表格列出了常用的验证注解,它们位于<code>javax.validation.constraints</code>包中:</p><table><thead><tr><th>注解</th><th>说明</th></tr></thead><tbody><tr><td><a href="https://jakarta.ee/specifications/bean-validation/3.0/apidocs/jakarta/validation/constraints/notnull" target="_blank" rel="noopener noreferrer">@NotNull</a></td><td>验证对象是否为<code>null</code></td></tr><tr><td><a href="https://jakarta.ee/specifications/bean-validation/3.0/apidocs/jakarta/validation/constraints/notempty" target="_blank" rel="noopener noreferrer">@NotEmpty</a></td><td>验证对象是否为<code>null</code>或者空(字符串长度不为0、集合大小不为0等)</td></tr><tr><td><a href="https://jakarta.ee/specifications/bean-validation/3.0/apidocs/jakarta/validation/constraints/notblank" target="_blank" rel="noopener noreferrer">@NotBlank</a></td><td>验证注解的字符串不是<code>null</code>且去除两端空格后长度大于0</td></tr><tr><td><a href="https://jakarta.ee/specifications/bean-validation/3.0/apidocs/jakarta/validation/constraints/size" target="_blank" rel="noopener noreferrer">@Size(min,max)</a></td><td>验证对象(数组、集合、<code>Map</code>等)长度是否在给定的范围内</td></tr><tr><td><a href="https://jakarta.ee/specifications/bean-validation/3.0/apidocs/jakarta/validation/constraints/email" target="_blank" rel="noopener noreferrer">@Email</a></td><td>验证注解的字符串是否是一个合法的邮箱地址</td></tr><tr><td><a href="https://jakarta.ee/specifications/bean-validation/3.0/apidocs/jakarta/validation/constraints/pattern" target="_blank" rel="noopener noreferrer">@Pattern(regex)</a></td><td>验证注解的字符串是否匹配给定的正则表达式</td></tr><tr><td><a href="https://jakarta.ee/specifications/bean-validation/3.0/apidocs/jakarta/validation/constraints/min" target="_blank" rel="noopener noreferrer">@Min(value)</a></td><td>验证注解的数字是否大于等于指定的值(只能用于整数类型)</td></tr><tr><td><a href="https://jakarta.ee/specifications/bean-validation/3.0/apidocs/jakarta/validation/constraints/max" target="_blank" rel="noopener noreferrer">@Max(value)</a></td><td>验证注解的数字是否小于等于指定的值</td></tr><tr><td><a href="https://jakarta.ee/specifications/bean-validation/3.0/apidocs/jakarta/validation/constraints/decimalmin" target="_blank" rel="noopener noreferrer">@DecimalMin(value)</a></td><td>验证注解的数字是否大于等于指定的值(可以用于任何数值类型,包括浮点数如<code>float</code>和<code>double</code>及其包装类)</td></tr><tr><td><a href="https://jakarta.ee/specifications/bean-validation/3.0/apidocs/jakarta/validation/constraints/negative" target="_blank" rel="noopener noreferrer">@Negative</a></td><td>验证注解的数字是否为负数</td></tr><tr><td><a href="https://jakarta.ee/specifications/bean-validation/3.0/apidocs/jakarta/validation/constraints/negativeorzero" target="_blank" rel="noopener noreferrer">@NegativeOrZero</a></td><td>验证注解的数字是否为负数或者0</td></tr><tr><td><a href="https://jakarta.ee/specifications/bean-validation/3.0/apidocs/jakarta/validation/constraints/positive" target="_blank" rel="noopener noreferrer">@Positive</a></td><td>验证注解的数字是否为正数</td></tr><tr><td><a href="https://jakarta.ee/specifications/bean-validation/3.0/apidocs/jakarta/validation/constraints/positiveorzero" target="_blank" rel="noopener noreferrer">@PositiveOrZero</a></td><td>验证注解的数字是否为正数或者0</td></tr><tr><td><a href="https://jakarta.ee/specifications/bean-validation/3.0/apidocs/jakarta/validation/constraints/digits" target="_blank" rel="noopener noreferrer">@Digits(integer,fraction)</a></td><td>验证注解的元素值的整数和小数部分的位数</td></tr><tr><td><a href="https://jakarta.ee/specifications/bean-validation/3.0/apidocs/jakarta/validation/constraints/past" target="_blank" rel="noopener noreferrer">@Past</a></td><td>验证注解的元素值(日期类型)是否在当前时间之前</td></tr><tr><td><a href="https://jakarta.ee/specifications/bean-validation/3.0/apidocs/jakarta/validation/constraints/future" target="_blank" rel="noopener noreferrer">@Future</a></td><td>验证注解的元素值(日期类型)是否在当前时间之后</td></tr><tr><td><a href="https://jakarta.ee/specifications/bean-validation/3.0/apidocs/jakarta/validation/constraints/futureorpresent" target="_blank" rel="noopener noreferrer">@FutureOrPresent</a></td><td>验证注解的元素值(日期类型)是否在当前时间之后或者当前时间</td></tr><tr><td><a href="https://jakarta.ee/specifications/bean-validation/3.0/apidocs/jakarta/validation/constraints/pastorpresent" target="_blank" rel="noopener noreferrer">@PastOrPresent</a></td><td>验证注解的元素值(日期类型)是否在当前时间之前或者当前时间</td></tr><tr><td><a href="https://jakarta.ee/specifications/bean-validation/3.0/apidocs/jakarta/validation/constraints/true" target="_blank" rel="noopener noreferrer">@AssertTrue</a></td><td>验证注解的元素值是<code>true</code></td></tr><tr><td><a href="https://jakarta.ee/specifications/bean-validation/3.0/apidocs/jakarta/validation/constraints/false" target="_blank" rel="noopener noreferrer">@AssertFalse</a></td><td>验证注解的元素值是<code>false</code></td></tr></tbody></table><h2 id="安装" tabindex="-1"><a class="header-anchor" href="#安装"><span>安装</span></a></h2><p>要在基于<code>Spring Boot</code>的<code>Web</code>项目中使用<code>Hibernate Validator</code>,首先需要添加对应的依赖:</p>',11),B=i("div",{class:"language-gradle line-numbers-mode","data-highlighter":"shiki","data-ext":"gradle","data-title":"gradle",style:{"--shiki-light":"#24292e","--shiki-dark":"#abb2bf","--shiki-light-bg":"#fff","--shiki-dark-bg":"#282c34"}},[i("pre",{class:"shiki shiki-themes github-light one-dark-pro vp-code"},[i("code",null,[i("span",{class:"line"},[i("span",null,"// https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-starter-validation")]),s(`
`),i("span",{class:"line"},[i("span",null,'implementation("org.springframework.boot:spring-boot-starter-validation:3.2.1")')])])]),i("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[i("div",{class:"line-number"}),i("div",{class:"line-number"})])],-1),c=i("div",{class:"language-xml line-numbers-mode","data-highlighter":"shiki","data-ext":"xml","data-title":"xml",style:{"--shiki-light":"#24292e","--shiki-dark":"#abb2bf","--shiki-light-bg":"#fff","--shiki-dark-bg":"#282c34"}},[i("pre",{class:"shiki shiki-themes github-light one-dark-pro vp-code"},[i("code",null,[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#7F848E","--shiki-light-font-style":"inherit","--shiki-dark-font-style":"italic"}}," <!-- https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-starter-validation -->")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#ABB2BF"}},"<"),i("span",{style:{"--shiki-light":"#22863A","--shiki-dark":"#E06C75"}},"dependency"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#ABB2BF"}},">")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#ABB2BF"}},"    <"),i("span",{style:{"--shiki-light":"#22863A","--shiki-dark":"#E06C75"}},"groupId"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#ABB2BF"}},">org.springframework.boot</"),i("span",{style:{"--shiki-light":"#22863A","--shiki-dark":"#E06C75"}},"groupId"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#ABB2BF"}},">")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#ABB2BF"}},"    <"),i("span",{style:{"--shiki-light":"#22863A","--shiki-dark":"#E06C75"}},"artifactId"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#ABB2BF"}},">spring-boot-starter-validation</"),i("span",{style:{"--shiki-light":"#22863A","--shiki-dark":"#E06C75"}},"artifactId"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#ABB2BF"}},">")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#ABB2BF"}},"    <"),i("span",{style:{"--shiki-light":"#22863A","--shiki-dark":"#E06C75"}},"version"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#ABB2BF"}},">3.2.1</"),i("span",{style:{"--shiki-light":"#22863A","--shiki-dark":"#E06C75"}},"version"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#ABB2BF"}},">")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#ABB2BF"}},"</"),i("span",{style:{"--shiki-light":"#22863A","--shiki-dark":"#E06C75"}},"dependency"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#ABB2BF"}},">")])])]),i("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"})])],-1),y=t(`<h2 id="定义验证规则" tabindex="-1"><a class="header-anchor" href="#定义验证规则"><span>定义验证规则</span></a></h2><p>如果你的控制器方法接收的是一个<code>Java Bean</code>,那么你可以在<code>Bean</code>的属性上使用上面提到的注解来定义验证规则.比如:</p><div class="language-kotlin line-numbers-mode" data-highlighter="shiki" data-ext="kotlin" data-title="kotlin" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">data</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;"> User</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;">    @field</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;">NotBlank</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;">message</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> = &quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;">用户名不能为空</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&quot;)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> username: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;">    @field</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;">NotBlank</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;">message</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> = &quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;">密码不能为空</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&quot;)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> password: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container warning"><p class="hint-container-title">注意</p><p>验证规则注解要放在<code>getter</code>方法上,所以如果用<code>kotlin data class</code>,需要在属性前面加上<code>@field:</code></p></div><p>如果控制器方法不需要封装成<code>Bean</code>,也可以直接在方法参数上使用这些注解:</p><div class="language-kotlin line-numbers-mode" data-highlighter="shiki" data-ext="kotlin" data-title="kotlin" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;">@GetMapping</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;/sendVerificationCode&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;">@Operation</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(summary </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> &quot;发送验证码&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> sendVerificationCode</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;">@Parameter</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(name </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> &quot;手机号&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">)  </span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;">@RequestParam</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;"> @NotBlank</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(message </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> &quot;手机号不能为空&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">) phone: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">    // ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="启用验证规则" tabindex="-1"><a class="header-anchor" href="#启用验证规则"><span>启用验证规则</span></a></h2><p>要使验证规则生效,涉及到<code>@Valid</code>和<code>@Validated</code>两个注解,具体规则如下:</p><h3 id="参数是非对象格式" tabindex="-1"><a class="header-anchor" href="#参数是非对象格式"><span>参数是<code>非对象格式</code></span></a></h3><p>这种情况下需要在控制器上加上<code>@Validated</code>注解,比如:</p><div class="language-kotlin line-numbers-mode" data-highlighter="shiki" data-ext="kotlin" data-title="kotlin" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;">@GetMapping</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;/sendVerificationCode&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;">@Operation</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(summary </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> &quot;发送验证码&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;">@Validated</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> sendVerificationCode</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;">@Parameter</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(name </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> &quot;手机号&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">)  </span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;">@RequestParam</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;"> @NotBlank</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(message </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> &quot;手机号不能为空&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">) phone: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">    // ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="参数是对象格式" tabindex="-1"><a class="header-anchor" href="#参数是对象格式"><span>参数是<code>对象格式</code></span></a></h3><p>这个情况下要在参数的前面加上<code>@Valid</code>注解,比如:</p><div class="language-kotlin line-numbers-mode" data-highlighter="shiki" data-ext="kotlin" data-title="kotlin" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;">@PostMapping</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;/login&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;">@Operation</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(summary </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> &quot;登录&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> login</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;">@RequestBody</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;"> @Valid</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> user: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;">User</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">    // ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="对于嵌套对象" tabindex="-1"><a class="header-anchor" href="#对于嵌套对象"><span>对于<code>嵌套对象</code></span></a></h3><p>这种情况下里面的对象也要添加<code>@Valid</code>注解,比如:</p><div class="language-kotlin line-numbers-mode" data-highlighter="shiki" data-ext="kotlin" data-title="kotlin" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;">@PostMapping</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;/login&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;">@Operation</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(summary </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> &quot;登录&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> login</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;">@RequestBody</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;"> @Valid</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> user: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;">User</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">    // ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">data</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;"> User</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;">    @field</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;">NotBlank</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;">message</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> = &quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;">用户名不能为空</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&quot;)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> username: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;">    @field</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;">NotBlank</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;">message</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> = &quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;">密码不能为空</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&quot;)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> password: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;">    @field</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;">Valid</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> address: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;">Address</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container warning"><p class="hint-container-title">注意</p><p>务必照上面的规则来使用<code>@Valid</code>和<code>@Validated</code>注解,否则验证规则不会生效</p></div><h2 id="自定义规则注解" tabindex="-1"><a class="header-anchor" href="#自定义规则注解"><span>自定义规则注解</span></a></h2><p>比如说我现在想创建一个名为<code>@IsChinaPhoneNumber</code>的注解,用来验证手机号是否是中国的手机号:</p><p>首先需要创建一个验证器来实现具体的逻辑:</p><div class="language-kotlin line-numbers-mode" data-highlighter="shiki" data-ext="kotlin" data-title="kotlin" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;"> ChinaPhoneNumberValidator</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> : </span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;">ConstraintValidator</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;">IsChinaPhoneNumber</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt; {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    override</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> isValid</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(phoneNumber: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">?, context: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;">ConstraintValidatorContext</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">): </span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;">Boolean</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">        if</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> (phoneNumber </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">==</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">            return</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> true</span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> // 如果要求非空验证，请移除此行并使用 @NotNull 注解</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">        // 中国大陆手机号通常以 1 开头，且长度为 11 位数字</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">        val</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> regex </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> Regex</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;^(1[3-9])</span><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2;">\\\\</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">d{9}$&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">        return</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> regex.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">matches</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(phoneNumber)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后创建一个注解类,并在其中指定验证器:</p><div class="language-kotlin line-numbers-mode" data-highlighter="shiki" data-ext="kotlin" data-title="kotlin" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;">@Target</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(FIELD, PROPERTY_GETTER, VALUE_PARAMETER)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;">@Retention</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(RUNTIME)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;">@Constraint</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(validatedBy </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> [ChinaPhoneNumberValidator::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">class</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">])</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">annotation</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;"> IsChinaPhoneNumber</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> message: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> &quot;Invalid China phone number&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> groups: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;">Array</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;">KClass</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&lt;*&gt;&gt; </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> [],</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> payload: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;">Array</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;">KClass</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;">out</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;"> Payload</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;&gt; </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> []</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来就可以把它当成普通的验证注解来使用了:</p><div class="language-kotlin line-numbers-mode" data-highlighter="shiki" data-ext="kotlin" data-title="kotlin" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;">    @GetMapping</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;/sendVerificationCode&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;">    @Operation</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(summary </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> &quot;发送验证码&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> sendVerificationCode</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;">@Parameter</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(name </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> &quot;手机号&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">)  </span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;">@RequestParam</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;"> @IsChinaPhoneNumber</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(message </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> &quot;手机号格式不正确&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">) phone: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">        // ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    }</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="验证失败时的处理" tabindex="-1"><a class="header-anchor" href="#验证失败时的处理"><span>验证失败时的处理</span></a></h2><h3 id="错误收集策略" tabindex="-1"><a class="header-anchor" href="#错误收集策略"><span>错误收集策略</span></a></h3><p>如何希望在遇到第一个验证错误时就立即返回,可以使用如下配置:</p><div class="language-kotlin line-numbers-mode" data-highlighter="shiki" data-ext="kotlin" data-title="kotlin" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;">@Configuration</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;">@ConditionalOnClass</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(ExecutableValidator::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">class</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;"> ValidationAutoConfiguration</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;">    @Bean</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> validator</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(springFactory: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;">AutowireCapableBeanFactory</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">): </span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;">Validator</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">        Validation.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">byProvider</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(HibernateValidator::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">class</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.java)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">            .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">configure</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">() </span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">// 快速失败</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">            .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">failFast</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">// 解决 SpringBoot 依赖注入问题</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">            .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">constraintValidatorFactory</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">SpringConstraintValidatorFactory</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(springFactory))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">            .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">buildValidatorFactory</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">use</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> { factory </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">-&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">                return</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> factory.validator</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">            }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="错误信息的返回" tabindex="-1"><a class="header-anchor" href="#错误信息的返回"><span>错误信息的返回</span></a></h3><p>在<code>Spring Web MVC</code>中我们通常使用一个全局异常拦截器来处理所有的异常,针对验证这一块的异常可以做如下配置:</p><div class="language-kotlin line-numbers-mode" data-highlighter="shiki" data-ext="kotlin" data-title="kotlin" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;">@ControllerAdvice</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;"> GlobalExceptionConfiguration</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;">    @ExceptionHandler</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(MethodArgumentNotValidException::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">class</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;">    @ResponseBody</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> handleMethodArgumentNotValidException</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(e: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;">MethodArgumentNotValidException</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">): </span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;">IJsonResponse</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;">Any</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt; {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">        val</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> errors </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> e.bindingResult.fieldErrors.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">firstOrNull</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">()?.defaultMessage.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">orEmpty</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">()</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">        return</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> JsonResponse.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">failure</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(errors)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="参考" tabindex="-1"><a class="header-anchor" href="#参考"><span>参考</span></a></h2><ul><li><a href="https://www.baeldung.com/spring-boot-bean-validation" target="_blank" rel="noopener noreferrer">Validation in Spring Boot | Baeldung</a></li></ul>`,35);function v(F,u){const l=k("CodeTabs");return r(),p("div",null,[g,d(l,{id:"204",data:[{id:"Gradle KTS"},{id:"Maven"}],active:0,"tab-id":"dynamicProps"},{title0:a(({value:n,isActive:e})=>[s("Gradle KTS")]),title1:a(({value:n,isActive:e})=>[s("Maven")]),tab0:a(({value:n,isActive:e})=>[B]),tab1:a(({value:n,isActive:e})=>[c]),_:1}),y])}const b=h(o,[["render",v],["__file","表单验证.html.vue"]]),C=JSON.parse('{"path":"/Programming/SpringBoot/WebMvc/%E8%A1%A8%E5%8D%95%E9%AA%8C%E8%AF%81.html","title":"表单验证","lang":"zh-CN","frontmatter":{"title":"表单验证","comment":false,"editLink":false,"prev":false,"next":false,"description":"简介 表单验证是一个非常常见的需求,它是指对用户提交的表单数据进行验证,确保数据的合法性 JSR-303中定义了一套Java的Bean 验证规范(1.0),Hibernate Validator是这套规范的一个具体实现. JSR-349和JSR-380分别是JSR-303 的1.1和2.0版本. Spring Boot Starter Validati...","head":[["meta",{"property":"og:url","content":"https://vuepress-theme-hope-docs-demo.netlify.app/Programming/SpringBoot/WebMvc/%E8%A1%A8%E5%8D%95%E9%AA%8C%E8%AF%81.html"}],["meta",{"property":"og:site_name","content":"一星的臭弟弟"}],["meta",{"property":"og:title","content":"表单验证"}],["meta",{"property":"og:description","content":"简介 表单验证是一个非常常见的需求,它是指对用户提交的表单数据进行验证,确保数据的合法性 JSR-303中定义了一套Java的Bean 验证规范(1.0),Hibernate Validator是这套规范的一个具体实现. JSR-349和JSR-380分别是JSR-303 的1.1和2.0版本. Spring Boot Starter Validati..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-07-03T23:01:39.000Z"}],["meta",{"property":"article:author","content":"Cruldra"}],["meta",{"property":"article:modified_time","content":"2024-07-03T23:01:39.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"表单验证\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-07-03T23:01:39.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Cruldra\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":2,"title":"简介","slug":"简介","link":"#简介","children":[]},{"level":2,"title":"验证注解","slug":"验证注解","link":"#验证注解","children":[]},{"level":2,"title":"安装","slug":"安装","link":"#安装","children":[]},{"level":2,"title":"定义验证规则","slug":"定义验证规则","link":"#定义验证规则","children":[]},{"level":2,"title":"启用验证规则","slug":"启用验证规则","link":"#启用验证规则","children":[{"level":3,"title":"参数是非对象格式","slug":"参数是非对象格式","link":"#参数是非对象格式","children":[]},{"level":3,"title":"参数是对象格式","slug":"参数是对象格式","link":"#参数是对象格式","children":[]},{"level":3,"title":"对于嵌套对象","slug":"对于嵌套对象","link":"#对于嵌套对象","children":[]}]},{"level":2,"title":"自定义规则注解","slug":"自定义规则注解","link":"#自定义规则注解","children":[]},{"level":2,"title":"验证失败时的处理","slug":"验证失败时的处理","link":"#验证失败时的处理","children":[{"level":3,"title":"错误收集策略","slug":"错误收集策略","link":"#错误收集策略","children":[]},{"level":3,"title":"错误信息的返回","slug":"错误信息的返回","link":"#错误信息的返回","children":[]}]},{"level":2,"title":"参考","slug":"参考","link":"#参考","children":[]}],"git":{"createdTime":1720047699000,"updatedTime":1720047699000,"contributors":[{"name":"cruldra","email":"cruldra@gmail.com","commits":1}]},"readingTime":{"minutes":5.38,"words":1613},"filePathRelative":"Programming/SpringBoot/WebMvc/表单验证.md","localizedDate":"2024年7月3日","autoDesc":true}');export{b as comp,C as data};
