import{_ as a,r as e,o as t,c as n,d as l,e as i}from"./app-Bmelea3n.js";const h={},r=i('<h2 id="简介" tabindex="-1"><a class="header-anchor" href="#简介"><span>简介</span></a></h2><p>在<code>React</code> 组件树中,如果某个子组件抛出异常,默认情况下会导致整个组件树崩溃,此时用户就会看到类似下面这样的页面:</p><figure><img src="https://cdn.jsdelivr.net/gh/hhypygy/picx-images-hosting@master/image.6t6v693zvk.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>这个页面会使用户不知所措,为了解决这个问题,<code>React</code>在<code>16</code> 版本中引入了<a href="https://react.dev/reference/react/Component#catching-rendering-errors-with-an-error-boundary" target="_blank" rel="noopener noreferrer"><code>错误边界(Error Boundary)</code></a> 的概念.</p><div class="hint-container tip"><p class="hint-container-title">提示</p><p><code>错误边界</code>是一个特殊的组件,它可以捕获发生在其子组件树中任何位置的<code>JavaScript</code>错误,并且渲染出备用的UI,而不是崩溃的页面.这将大大提高用户体验.</p></div><h2 id="捕获组件树中的错误" tabindex="-1"><a class="header-anchor" href="#捕获组件树中的错误"><span>捕获组件树中的错误</span></a></h2><p>先来模拟一下因为子组件抛出异常导致整个组件树崩溃的情况:</p>',7),p=i(`<p>现在我们用<a href="https://www.npmjs.com/package/react-error-boundary" target="_blank" rel="noopener noreferrer">react-error-boundary</a><sup class="footnote-ref"><a href="#footnote1">[1]</a><a class="footnote-anchor" id="footnote-ref1"></a></sup> 库中的<code>ErrorBoundary</code> 组件来捕获这个错误,并渲染出备用的UI:</p><div class="language-tsx line-numbers-mode" data-highlighter="shiki" data-ext="tsx" data-title="tsx" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">//App.tsx</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> {</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">ErrorBoundary</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">} </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> &#39;react-error-boundary&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> default</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> () </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> myErrorHandler</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">error</span><span style="--shiki-light:#D73A49;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;"> Error</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">info</span><span style="--shiki-light:#D73A49;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;"> React</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;">ErrorInfo</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">        alert</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&#39;捕获到了错误&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">        return</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> false</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    };</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> (</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">        &lt;&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">            &lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;">ErrorBoundary</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#D19A66;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">                FallbackComponent</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#C678DD;">{</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">h1</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;出现错误了&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">h1</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#C678DD;">}</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#D19A66;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">                onError</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#C678DD;">{</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">myErrorHandler</span><span style="--shiki-light:#24292E;--shiki-dark:#C678DD;">}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">            &gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">                &lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;">MaybeThrow</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">/&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">            &lt;/</span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;">ErrorBoundary</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">        &lt;/&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    );</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">};</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><iframe src="https://stackblitz.com/edit/vitejs-vite-5atafb?ctl=1&amp;embed=1&amp;file=src%2FApp.tsx&amp;hideNavigation=1&amp;theme=dark" style="width:100%;height:500px;border:0;border-radius:4px;overflow:hidden;"></iframe><h2 id="无法捕获的错误" tabindex="-1"><a class="header-anchor" href="#无法捕获的错误"><span>无法捕获的错误</span></a></h2><p><code>ErrorBoundary</code>可以捕获大部分的错误,但有一些特定类型的错误是它捕获不了的,包括:</p><h3 id="事件处理器内部的错误" tabindex="-1"><a class="header-anchor" href="#事件处理器内部的错误"><span>事件处理器内部的错误</span></a></h3><iframe src="https://stackblitz.com/edit/vitejs-vite-594rm8?ctl=1&amp;embed=1&amp;file=src%2FApp.tsx" style="width:100%;height:500px;border:0;border-radius:4px;overflow:hidden;"></iframe><p>在上面的例子中,虽然用<code>ErrorBoundary</code>包裹了<code>MaybeThrow</code>组件</p><div class="language-tsx line-numbers-mode" data-highlighter="shiki" data-ext="tsx" data-title="tsx" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;">ErrorBoundary</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#D19A66;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">    FallbackComponent</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#C678DD;">{</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">h1</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;出现错误了&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">h1</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#C678DD;">}</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#D19A66;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">    onError</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#C678DD;">{</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">myErrorHandler</span><span style="--shiki-light:#24292E;--shiki-dark:#C678DD;">}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    &lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;">MaybeThrow</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">/&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&lt;/</span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;">ErrorBoundary</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>但是在按钮<code>&lt;button onClick={handleClick}&gt;点击我&lt;/button&gt;</code>的<code>onClick</code>事件处理函数中抛出的异常是无法被<code>ErrorBoundary</code>捕获的</p><div class="hint-container tip"><p class="hint-container-title">提示</p><p>这种虽然因为没有被<code>ErrorBoundary</code>捕获到而不显示备用UI,但也不会导致整个组件树崩溃,因为错误不是在渲染期间抛出的,而是在事件处理器内部抛出的,此时组件树已经渲染完成,只是事件无法得到正确的响应</p></div><h3 id="异步代码中的错误" tabindex="-1"><a class="header-anchor" href="#异步代码中的错误"><span>异步代码中的错误</span></a></h3><p><code>ErrorBoundary</code>无法捕获<code>setTimeout</code>、原生<code>Promises</code>或者其他异步API的错误,这些错误和<code>事件处理器内部的错误</code> 的表现一样,不显示备用UI,但也不会导致整个组件树崩溃</p><h3 id="服务端渲染期间的错误" tabindex="-1"><a class="header-anchor" href="#服务端渲染期间的错误"><span>服务端渲染期间的错误</span></a></h3><p>这个很好理解,错误发生在<code>SSR</code>服务器端,自然也不会被<code>ErrorBoundary</code>捕获到</p><h2 id="异步加载的组件" tabindex="-1"><a class="header-anchor" href="#异步加载的组件"><span>异步加载的组件</span></a></h2><p><code>Suspense</code>是为了让组件可以等待某些异步操作的完成,并在等待的时候显示一个备用的UI( 比如在等待整个页面渲染的过程中显示一个骨架屏)</p><p>对于使用<code>React.lazy</code>和<code>Suspense</code>异步加载的组件,首先要明确一点:</p><div class="hint-container info"><p class="hint-container-title">Suspense的机制</p><p>它在渲染备用UI的时候是因为需要在等待主UI加载,此时是一种正常的<code>等待</code>行为,抛出的是<code>Promise rejection</code>,而不是<code>Error</code> ,不应该也不会被<code>ErrorBoundary</code> 捕获</p><p>但是如果主UI在渲染的时候抛出了错误,仍然会被<code>ErrorBoundary</code>捕获到</p></div><iframe src="https://stackblitz.com/edit/vitejs-vite-unsfar?ctl=1&amp;embed=1&amp;file=src%2FApp.tsx" style="width:100%;height:500px;border:0;border-radius:4px;overflow:hidden;"></iframe><h3 id="react-router-dom" tabindex="-1"><a class="header-anchor" href="#react-router-dom"><span><code>react-router-dom</code></span></a></h3><p><code>react-router-dom</code>在处理异步组件时,已经实现了自己的错误处理机制,可能会在错误到达<code>ErrorBoundary</code>之前就处理掉错误</p><iframe src="https://stackblitz.com/edit/vitejs-vite-wuvvph?ctl=1&amp;embed=1&amp;file=src%2FApp.tsx" style="width:100%;height:500px;border:0;border-radius:4px;overflow:hidden;"></iframe><p>由于错误被<code>react-router-dom</code>处理了,因此显示的是<code>react-router-dom</code>提供的备用UI,而不是<code>ErrorBoundary</code>提供的备用UI</p><figure><img src="https://cdn.jsdelivr.net/gh/hhypygy/picx-images-hosting@master/image.6t6v693zvk.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>通过使用<code>ErrorBoundary</code>包裹<code>Suspense</code>组件来解决这个问题:</p><div class="language-tsx line-numbers-mode" data-highlighter="shiki" data-ext="tsx" data-title="tsx" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">// ...</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;"> router</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> createBrowserRouter</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">  createRoutesFromElements</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    &lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;">Route</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#D19A66;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">      path</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;/&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#D19A66;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">      element</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#C678DD;">{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">        &lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;">ErrorBoundary</span><span style="--shiki-light:#6F42C1;--shiki-dark:#D19A66;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> FallbackComponent</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#C678DD;">{</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">h1</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;出现错误了&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">h1</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#C678DD;">}</span><span style="--shiki-light:#6F42C1;--shiki-dark:#D19A66;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> onError</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#C678DD;">{</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">myErrorHandler</span><span style="--shiki-light:#24292E;--shiki-dark:#C678DD;">}</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">          &lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;">Suspense</span><span style="--shiki-light:#6F42C1;--shiki-dark:#D19A66;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> fallback</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#C678DD;">{</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;Loading...&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#C678DD;">}</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">            &lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;">OtherComponent</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> /&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">          &lt;/</span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;">Suspense</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">        &lt;/</span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;">ErrorBoundary</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#C678DD;">      }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    &gt;&lt;/</span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;">Route</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">  )</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">// ...</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr class="footnotes-sep"><section class="footnotes"><ol class="footnotes-list"><li id="footnote1" class="footnote-item"><p>react-error-boundary</p><p>这个库是<code>React</code>官方推荐的错误边界库,它提供了一个<code>ErrorBoundary</code>组件,用于以简单和一致的方式来处理<code>React</code>应用中的错误边界 <a href="#footnote-ref1" class="footnote-backref">↩︎</a></p></li></ol></section>`,29);function k(d,o){const s=e("SandPack");return t(),n("div",null,[r,l(s,{theme:"dark",title:"React%20%E7%A4%BA%E4%BE%8B%20",template:"react-ts",files:"eJxdkLFOw0AMhl/FytBcpIrskJyEECMLsBGGNHVERXoX+Ry1KMrCUglWFsTK3pki8TSUwluQ3BUlwpN9Z///Z9deeFyWB2yW3qEHs3mpieEc04zHUFcGLzhlbCAnPQefunf/KFGJyrQyDGfp3QQvb0gvIAZRki5NALGEOlHQBtsfhQs4JdIk/N3r5vPj8efp+Xu99oNOxzUSckUKRCSjUAatQWNNEoVLCzTFPK0KBjFUdwhXWTHLbnE6BoN84vLrluaPXeRpYbD1Gvq4qotI9rmtJxWzVqCV1YprZ9lrC6YKg0bu7t+2q/evh5ftauMWikI3+0+x3gPCaARRf7BQNgOKcD9kd0+U1/wC7nGLsA==",options:"eJyrrgUAAXUA+Q==",customSetup:"eJyrrgUAAXUA+Q=="}),p])}const g=a(h,[["render",k],["__file","错误边界.html.vue"]]),y=JSON.parse('{"path":"/Programming/Frontend/React/%E9%94%99%E8%AF%AF%E8%BE%B9%E7%95%8C.html","title":"错误边界","lang":"zh-CN","frontmatter":{"title":"错误边界","comment":false,"editLink":false,"prev":false,"next":false,"description":"简介 在React 组件树中,如果某个子组件抛出异常,默认情况下会导致整个组件树崩溃,此时用户就会看到类似下面这样的页面: 这个页面会使用户不知所措,为了解决这个问题,React在16 版本中引入了错误边界(Error Boundary) 的概念. 提示 错误边界是一个特殊的组件,它可以捕获发生在其子组件树中任何位置的JavaScript错误,并且渲染...","head":[["meta",{"property":"og:url","content":"https://vuepress-theme-hope-docs-demo.netlify.app/Programming/Frontend/React/%E9%94%99%E8%AF%AF%E8%BE%B9%E7%95%8C.html"}],["meta",{"property":"og:site_name","content":"一星的臭弟弟"}],["meta",{"property":"og:title","content":"错误边界"}],["meta",{"property":"og:description","content":"简介 在React 组件树中,如果某个子组件抛出异常,默认情况下会导致整个组件树崩溃,此时用户就会看到类似下面这样的页面: 这个页面会使用户不知所措,为了解决这个问题,React在16 版本中引入了错误边界(Error Boundary) 的概念. 提示 错误边界是一个特殊的组件,它可以捕获发生在其子组件树中任何位置的JavaScript错误,并且渲染..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://cdn.jsdelivr.net/gh/hhypygy/picx-images-hosting@master/image.6t6v693zvk.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-07-03T23:01:39.000Z"}],["meta",{"property":"article:author","content":"Cruldra"}],["meta",{"property":"article:modified_time","content":"2024-07-03T23:01:39.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"错误边界\\",\\"image\\":[\\"https://cdn.jsdelivr.net/gh/hhypygy/picx-images-hosting@master/image.6t6v693zvk.png\\",\\"https://cdn.jsdelivr.net/gh/hhypygy/picx-images-hosting@master/image.6t6v693zvk.png\\"],\\"dateModified\\":\\"2024-07-03T23:01:39.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Cruldra\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":2,"title":"简介","slug":"简介","link":"#简介","children":[]},{"level":2,"title":"捕获组件树中的错误","slug":"捕获组件树中的错误","link":"#捕获组件树中的错误","children":[]},{"level":2,"title":"无法捕获的错误","slug":"无法捕获的错误","link":"#无法捕获的错误","children":[{"level":3,"title":"事件处理器内部的错误","slug":"事件处理器内部的错误","link":"#事件处理器内部的错误","children":[]},{"level":3,"title":"异步代码中的错误","slug":"异步代码中的错误","link":"#异步代码中的错误","children":[]},{"level":3,"title":"服务端渲染期间的错误","slug":"服务端渲染期间的错误","link":"#服务端渲染期间的错误","children":[]}]},{"level":2,"title":"异步加载的组件","slug":"异步加载的组件","link":"#异步加载的组件","children":[{"level":3,"title":"react-router-dom","slug":"react-router-dom","link":"#react-router-dom","children":[]}]}],"git":{"createdTime":1720047699000,"updatedTime":1720047699000,"contributors":[{"name":"cruldra","email":"cruldra@gmail.com","commits":1}]},"readingTime":{"minutes":3.69,"words":1108},"filePathRelative":"Programming/Frontend/React/错误边界.md","localizedDate":"2024年7月3日","autoDesc":true}');export{g as comp,y as data};
