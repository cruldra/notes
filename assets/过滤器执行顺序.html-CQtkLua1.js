import{i as B,_ as F,r,o as g,c as C,a as s,b as i,d as a,w as u,e as t}from"./app-Bmelea3n.js";const y=B({__name:"过滤器执行顺序.html",setup(k,{expose:p}){p();const d={images:[{src:"https://cdn.jsdelivr.net/gh/hhypygy/images@master/20240101/image.6m210oynnm80.webp",alt:""}],images2:[{src:"https://cdn.jsdelivr.net/gh/hhypygy/images@master/20240101/image.2f8q15xydou8.webp",alt:""}],images3:[{src:"https://cdn.jsdelivr.net/gh/hhypygy/images@master/20240101/image.11e495u46vr4.webp",alt:""}],images4:[{src:"https://cdn.jsdelivr.net/gh/hhypygy/images@master/20240101/image.44czzorcw1o0.webp",alt:""}],images5:[{src:"https://cdn.jsdelivr.net/gh/hhypygy/images@master/20240101/image.2fa0434ao3b4.webp",alt:""}],images6:[{src:"https://cdn.jsdelivr.net/gh/hhypygy/images@master/20240101/image.uoon1ccvhj4.webp",alt:""}],images7:[{src:"https://cdn.jsdelivr.net/gh/hhypygy/images@master/20240101/image.5ctj5nv96f80.webp",alt:""}],images8:[{src:"https://cdn.jsdelivr.net/gh/hhypygy/images@master/20240101/image.45zz9orsneg0.webp",alt:""}],images9:[{src:"https://cdn.jsdelivr.net/gh/hhypygy/images@master/20240101/image.4i1ilnj7vh20.webp",alt:""}],images10:[{src:"https://cdn.jsdelivr.net/gh/hhypygy/images@master/20240101/image.2cef31u6c05c.png",alt:""}],images11:[{src:"https://cdn.jsdelivr.net/gh/hhypygy/images@master/20240101/image.1rhntkongeyo.png",alt:""}]};return Object.defineProperty(d,"__isScriptSetup",{enumerable:!1,value:!0}),d}}),A=t(`<h2 id="简介" tabindex="-1"><a class="header-anchor" href="#简介"><span>简介</span></a></h2><p>因为<code>Spring Security</code>是基于各种各样的<code>Servlet</code>过滤器实现的,所以了解过滤器的执行顺序对于理解<code>Spring Security</code>的工作原理非常重要.</p><p>刚好我这里遇到一个过滤器不生效的问题,通过调试确认出是由于执行顺序导致的,所以这里记录一下.</p><h2 id="相关配置" tabindex="-1"><a class="header-anchor" href="#相关配置"><span>相关配置</span></a></h2><p>使用的相关配置如下:</p><details class="hint-container details"><summary>security配置</summary><div class="language-kotlin line-numbers-mode" data-highlighter="shiki" data-ext="kotlin" data-title="kotlin" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;">@EnableWebSecurity</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;">@Configuration</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;"> SecurityConfig</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">private</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> val</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> context: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;">ApplicationContext</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;">    @Bean</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;">    @ConditionalOnMissingBean</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> jwtAuthenticationFilter</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">        jwtTokenProvider: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;">IJwtTokenProvider</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">        userDetailsService: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;">UserDetailsService</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    ): </span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;">JwtAuthenticationFilter</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">        return</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> JwtAuthenticationFilter</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(jwtTokenProvider, userDetailsService)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;">    @Bean</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;">    @Throws</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(Exception::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">class</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> filterChain</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(http: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;">HttpSecurity</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">): </span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;">SecurityFilterChain</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">        http.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">sessionManagement</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">            it.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">sessionCreationPolicy</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(STATELESS)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">        http.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">authorizeHttpRequests</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">            it.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">permitKnife4j</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(context)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">            it.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">permitAuthentication</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">            it.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">anyRequest</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">authenticated</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">()</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">//            it.anyRequest().permitAll()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">        http.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">csrf</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">            it.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">disable</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">        return</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> http.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">build</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><details class="hint-container details"><summary>jwt过滤器</summary><div class="language-kotlin line-numbers-mode" data-highlighter="shiki" data-ext="kotlin" data-title="kotlin" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;"> JwtAuthenticationFilter</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">private</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> val</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> jwtTokenProvider: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;">IJwtTokenProvider</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> , </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">private</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> val</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> userDetailsService: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;">UserDetailsService</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">) :</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">    OncePerRequestFilter</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">() {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    override</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> doFilterInternal</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">        request: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;">HttpServletRequest</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">        response: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;">HttpServletResponse</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">        filterChain: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;">FilterChain</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    ) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">        // 从 request 获取 JWT token</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">        val</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> token </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> getTokenFromRequest</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(request)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">        //...具体逻辑</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">        filterChain.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">doFilter</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(request, response)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><h2 id="问题分析" tabindex="-1"><a class="header-anchor" href="#问题分析"><span>问题分析</span></a></h2>`,8),D=s("code",null,"FilterChainProxy",-1),m=s("code",null,"JwtAuthenticationFilter",-1),v=s("code",null,"FilterChainProxy",-1),b=s("code",null,"FilterChainProxy",-1),f=s("code",null,"JwtAuthenticationFilter",-1),_=t('<p>这里可以看到<code>FilterChainProxy</code>中压根就没有<code>JwtAuthenticationFilter</code>这个过滤器</p><p>接着再去看看<code>tomcat</code>和<code>spring security</code>交接的地方有没有这个<code>JwtAuthenticationFilter</code> 这个过滤器,这里就要提一下<a href="https://jakarta.ee/specifications/servlet/5.0/apidocs/jakarta/servlet/filterchain" target="_blank" rel="noopener noreferrer"><code>FilterChain</code></a> 和<a href="https://tomcat.apache.org/tomcat-8.5-doc/api/org/apache/catalina/core/ApplicationFilterChain.html" target="_blank" rel="noopener noreferrer"><code>ApplicationFilterChain</code></a> 这两个类了.</p>',2),S=t("<ul><li><code>jakarta.servlet.FilterChain</code> - 这个接口是<code>servlet</code> 规范中定义的,表示一个过滤器链,里面维持了一个过滤器列表,当一个请求到达<code>servlet</code>容器时,<code>FilterChain</code> 依次调用这些过滤器来处理请求.直到最后一个过滤器处理完毕后,请求才会被转发给<code>servlet</code>或者<code>jsp</code>来处理.</li><li><code>org.apache.catalina.core.ApplicationFilterChain</code> - 这个类是<code>tomcat</code>中<code>FilterChain</code>的具体实现类,<code>Spring Security</code> 中的核心类<code>FilterChainProxy</code>就是在这里面被调用的</li></ul><p>从上面的分析可以看到,<code>tomcat</code>和<code>spring security</code>交接的地方就是<code>ApplicationFilterChain</code>这个类,如图:</p>",2),w=s("p",null,[i("在"),s("code",null,"ApplicationFilterChain"),i("中打断点重新发起请求后看到"),s("code",null,"JwtAuthenticationFilter"),i("出现在"),s("code",null,"FilterChainProxy"),i("之后:")],-1),P=s("code",null,"JwtAuthenticationFilter",-1),x=s("code",null,"FilterChainProxy",-1),j=s("code",null,"ApplicationFilterChain",-1),J=s("code",null,"Spring Security",-1),T=t("<p>到这一步没有执行<code>JwtAuthenticationFilter</code>的原因应该就比较清晰了,是因为<code>FilterChainProxy</code> 中的<strong>其它过滤器提前对这个请求作出了响应而没有继续调用<code>chain.doFilter(request, response)</code></strong> ,导致<code>JwtAuthenticationFilter</code>没有机会被执行</p><p>接下来要做的就是找出<code>FilterChainProxy</code>中的哪个过滤器没有调用<code>chain.doFilter(request, response)</code></p>",2),R=s("code",null,"FilterChainProxy",-1),q=t(`<p>这里可以看到有一个过滤器直接返回了一个<code>403</code>的响应,根据这一点,我们在<code>FilterChainProxy</code>中找出是哪一个过滤器干的</p><p><code>403</code>响应表示没有权限,所以我们可以根据过滤器名称大概猜测一下哪些过滤器负责权限这一块的事,然后再在它们的<code>doFilter</code> 方法中打断点,这里我猜是<code>AuthorizationFilter</code>,因为它注释中写着:</p><pre><code>An authorization filter that restricts access to the URL using
</code></pre>`,3),O=s("p",null,"通过调试发现果然就是它",-1),z=s("p",null,[i("最后一个问题,是谁向客户端返回了"),s("code",null,"403"),i("响应,在上面抛出异常后继续调试,层层套娃,最终套到了")],-1),L=s("p",null,[i("最终由"),s("code",null,"Http403ForbiddenEntryPoint"),i("的"),s("code",null,"commence"),i("方法向客户端写入了"),s("code",null,"403"),i("响应")],-1),H=t('<h2 id="问题解决" tabindex="-1"><a class="header-anchor" href="#问题解决"><span>问题解决</span></a></h2><p>找到问题后解决起来就简单了,有两种方案:</p><ol><li>把<code>JwtAuthenticationFilter</code>交给<code>FilterChainProxy</code>管理</li><li>让<code>JwtAuthenticationFilter</code>在<code>FilterChainProxy</code>之前执行</li></ol>',3),I=s("code",null,"Spring Security",-1),N=s("p",null,[i("第二种的话回到"),s("code",null,"ApplicationFilterChain"),i("中的断点继续分析")],-1),K=t("<p>可以看到这里虽然<code>JwtAuthenticationFilter</code>在<code>FilterChainProxy</code>之后,但是<code>FilterChainProxy</code> 也不是第一个啊,所以随便找一个位于<code>FilterChainProxy</code>之前的过滤器,比如说<code>CharacterEncodingFilter</code> ,发现<code>ApplicationFilterChain</code>实际用到的是它的一个子类<code>OrderedCharacterEncodingFilter</code></p>",1),U=s("p",null,[i("这个子类实现了"),s("code",null,"OrderedFilter"),i("接口")],-1),M=t(`<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;"> OrderedCharacterEncodingFilter</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> extends</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;"> CharacterEncodingFilter</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> implements</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;"> OrderedFilter</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">	private</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> int</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> order </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> Ordered</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">HIGHEST_PRECEDENCE</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">	@</span><span style="--shiki-light:#D73A49;--shiki-dark:#E5C07B;">Override</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">	public</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> getOrder</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">()</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">		return</span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">order</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">	/**</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">	 * Set the order for this filter.</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">	 * </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">@param</span><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> order</span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> the order to set</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">	 */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">	public</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> setOrder</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> order</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;">		this</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">order</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> order;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>OrderedFilter</code>接口用于对过滤器排序,参考<a href="https://www.springcloud.io/post/2022-05/spring-security-filters-sorting-rules/#gsc.tab=0" target="_blank" rel="noopener noreferrer">Spring Security过滤器排序规则</a></p><div class="language-kotlin line-numbers-mode" data-highlighter="shiki" data-ext="kotlin" data-title="kotlin" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;"> JwtAuthenticationFilter</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">private</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> val</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> jwtTokenProvider: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;">IJwtTokenProvider</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> , </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">private</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> val</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> userDetailsService: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;">UserDetailsService</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">) :</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">    OncePerRequestFilter</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">()  , </span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">OrderedFilter</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">{</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    override</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> doFilterInternal</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">        request: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;">HttpServletRequest</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">        response: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;">HttpServletResponse</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">        filterChain: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;">FilterChain</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    ) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">        // 从 request 获取 JWT token</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">        val</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> token </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> getTokenFromRequest</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(request)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">        //...具体逻辑</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">        filterChain.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">doFilter</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(request, response)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">     override</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> getOrder</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(): </span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;">Int</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">        return</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> Ordered.HIGHEST_PRECEDENCE</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>现在我把<code>JwtAuthenticationFilter</code>实现了<code>OrderedFilter</code>接口,并且设置了最高优先级,再次发起请求,可以看到它现在已经在<code>FilterChainProxy</code>之前了</p>`,4);function V(k,p,E,e,c,o){const l=r("RouteLink"),n=r("ImageRenderer"),h=r("Mermaid");return g(),C("div",null,[A,s("p",null,[i("在"),a(l,{to:"/Programming/SpringBoot/Security/%E9%BB%98%E8%AE%A4%E9%85%8D%E7%BD%AE.html"},{default:u(()=>[i("默认配置")]),_:1}),i("这里介绍过核心过滤器"),D,i(",所以我分别在"),m,i(" 和"),v,i("中打了断点,然后在浏览器中访问了一个需要认证的接口,结果发现只有"),b,i(" 中的断点被触发了,而"),f,i("中的断点没有被触发.")]),a(n,{value:e.images,width:"1000",height:"500"}),_,a(h,{id:"mermaid-36",code:"eJxLzkksLnbJTEwvSszlSsksSk0uyczPU3AK4QLLKDgWFORkJieCBN0yc0pSi5wzEjPzoJJIIgrVXDY2nnlAblpicqqdHRdXLRcXds0KCnp6dgoomrm4ABsSLvY="}),S,a(n,{value:e.images2,width:"1000",height:"200"}),w,a(n,{value:e.images3,width:"1000",height:"300"}),s("p",null,[i("这里首先有个问题,为什么"),P,i("没有被"),x,i("管理而是跑到了"),j,i(" 中,这个问题可以看"),J,i("中的"),a(l,{to:"/Programming/SpringBoot/Security/%E8%BF%87%E6%BB%A4%E5%99%A8%E6%B3%A8%E5%86%8C%E6%9C%BA%E5%88%B6.html"},{default:u(()=>[i("过滤器注册机制")]),_:1})]),T,a(n,{value:e.images4,width:"1000",height:"500"}),s("p",null,[i("上面可以看到"),R,i("中一共有这么多个过滤器,这些过滤器的具体作用在"),a(l,{to:"/Programming/SpringBoot/Security/%E7%AE%80%E4%BB%8B.html"},{default:u(()=>[i("简介")]),_:1}),i("中提到过")]),a(n,{value:e.images5,width:"1000",height:"200"}),q,a(n,{value:e.images6,width:"1000",height:"500"}),O,z,a(n,{value:e.images7,width:"1000",height:"500"}),L,a(n,{value:e.images8,width:"1000",height:"300"}),H,s("p",null,[i("对于第一种方案参考"),I,i("中的"),a(l,{to:"/Programming/SpringBoot/Security/%E8%BF%87%E6%BB%A4%E5%99%A8%E6%B3%A8%E5%86%8C%E6%9C%BA%E5%88%B6.html"},{default:u(()=>[i("过滤器注册机制")]),_:1})]),N,a(n,{value:e.images9,width:"1000",height:"300"}),K,a(n,{value:e.images10,width:"1000",height:"200"}),U,a(h,{id:"mermaid-131",code:"eJxLzkksLnbJTEwvSszlSsksSk0uyczPU3AK4QLLKDhnJBYlJpekFrnmJeenZOalu2XmAHlQWf+ilNSi1BRcirjwyyso6OraKeCyQoGLCwD5bDkf"}),M,a(n,{value:e.images11,width:"1000",height:"300"})])}const Y=F(y,[["render",V],["__file","过滤器执行顺序.html.vue"]]),$=JSON.parse('{"path":"/Programming/SpringBoot/Security/%E8%BF%87%E6%BB%A4%E5%99%A8%E6%89%A7%E8%A1%8C%E9%A1%BA%E5%BA%8F.html","title":"过滤器执行顺序","lang":"zh-CN","frontmatter":{"title":"过滤器执行顺序","comment":false,"editLink":false,"prev":false,"next":false,"order":1,"description":"简介 因为Spring Security是基于各种各样的Servlet过滤器实现的,所以了解过滤器的执行顺序对于理解Spring Security的工作原理非常重要. 刚好我这里遇到一个过滤器不生效的问题,通过调试确认出是由于执行顺序导致的,所以这里记录一下. 相关配置 使用的相关配置如下: security配置 jwt过滤器 问题分析 在这里介绍过核...","head":[["meta",{"property":"og:url","content":"https://vuepress-theme-hope-docs-demo.netlify.app/Programming/SpringBoot/Security/%E8%BF%87%E6%BB%A4%E5%99%A8%E6%89%A7%E8%A1%8C%E9%A1%BA%E5%BA%8F.html"}],["meta",{"property":"og:site_name","content":"一星的臭弟弟"}],["meta",{"property":"og:title","content":"过滤器执行顺序"}],["meta",{"property":"og:description","content":"简介 因为Spring Security是基于各种各样的Servlet过滤器实现的,所以了解过滤器的执行顺序对于理解Spring Security的工作原理非常重要. 刚好我这里遇到一个过滤器不生效的问题,通过调试确认出是由于执行顺序导致的,所以这里记录一下. 相关配置 使用的相关配置如下: security配置 jwt过滤器 问题分析 在这里介绍过核..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-07-03T23:01:39.000Z"}],["meta",{"property":"article:author","content":"Cruldra"}],["meta",{"property":"article:modified_time","content":"2024-07-03T23:01:39.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"过滤器执行顺序\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-07-03T23:01:39.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Cruldra\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":2,"title":"简介","slug":"简介","link":"#简介","children":[]},{"level":2,"title":"相关配置","slug":"相关配置","link":"#相关配置","children":[]},{"level":2,"title":"问题分析","slug":"问题分析","link":"#问题分析","children":[]},{"level":2,"title":"问题解决","slug":"问题解决","link":"#问题解决","children":[]}],"git":{"createdTime":1720047699000,"updatedTime":1720047699000,"contributors":[{"name":"cruldra","email":"cruldra@gmail.com","commits":1}]},"readingTime":{"minutes":4.69,"words":1407},"filePathRelative":"Programming/SpringBoot/Security/过滤器执行顺序.md","localizedDate":"2024年7月3日","autoDesc":true}');export{Y as comp,$ as data};
