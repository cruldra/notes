import{_ as p,r as l,o as r,c as k,a as i,b as s,d as a,w as h,e as n}from"./app-Bmelea3n.js";const d={},o=n(`<h2 id="简介" tabindex="-1"><a class="header-anchor" href="#简介"><span>简介</span></a></h2><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/instanceof" target="_blank" rel="noopener noreferrer">instanceof</a> 运算符用来测试一个对象是否是一个<code>类(构造函数)</code>的实例</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">// 定义一个自定义构造函数</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> CustomType</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">() {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">    // ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">// 创建一个新的实例</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;"> instanceOfCustomType</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> CustomType</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">// 使用instanceof检查这个实例是否是CustomType的实例</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">console</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">instanceOfCustomType</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> instanceof</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;"> CustomType</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">); </span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">// 输出: true</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>es6</code>中:</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">// 定义一个自定义类</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;"> CustomClass</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">    // ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">// 创建一个新的实例</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;"> instanceOfCustomClass</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> CustomClass</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">// 使用instanceof检查这个实例是否是CustomClass的实例</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">console</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">instanceOfCustomClass</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> instanceof</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;"> CustomClass</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">); </span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">// 输出: true</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,5),c=i("code",null,"instanceof",-1),g=i("code",null,"实例对象",-1),y=i("code",null,"类(构造函数)",-1),m=i("code",null,"prototype",-1),u=n(`<p>可以这么理解:</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">obj</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> instanceof</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;">  Class</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">// 等价于</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">obj</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">prototypeChains</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">includes</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;">Class</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#E06C75;">prototype</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>因此如果对象继承自另一个对象,<code>instanceof</code>也会返回<code>true</code></p>`,3),v=n(`<h2 id="使用-构建的对象" tabindex="-1"><a class="header-anchor" href="#使用-构建的对象"><span>使用<code>{}</code>构建的对象</span></a></h2><p>使用花括号<code>{}</code>构建的对象的其原型对象为<code>Object.prototype</code></p><div class="language-ts line-numbers-mode" data-highlighter="shiki" data-ext="ts" data-title="ts" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;"> User</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">{</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;">    name</span><span style="--shiki-light:#D73A49;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;">string</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;"> res</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> {</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">a</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&#39;1&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">} </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">instanceof</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;"> User</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">//res = false</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,3);function B(f,C){const e=l("RouteLink"),t=l("SandPack");return r(),k("div",null,[o,i("p",null,[c,s("的原理是检测"),g,s("的"),a(e,{to:"/Programming/Frontend/Javascript/%E5%8E%9F%E5%9E%8B(prototype).html"},{default:h(()=>[s("原型")]),_:1}),s("链上是否包含目标"),y,s("的"),m]),u,a(t,{theme:"dark",title:"%E7%A4%BA%E4%BE%8B%20",template:"react-ts",files:"eJzFVz1P20AY/ivXLLGlyFY7guMKRR06gcQYZ7g4F2LqnCP7LECWJQaktkLqUrEw0Haq1KGUoRWoan8NCfAv+tq+GDs+G1OCyGS/n8897+O7S9BQfWbZnsK8xkqD7E4clyHToR5DW4RtuA5z2N6EbDLXoluojSSnv72CMN2TUVtHgUFR9FNV5BLmuxSt97eJyZTJPFFhTpKrmNi2o2x5lSfVy+DuLJj1YVyHFyr0FoS+VCgek3n4PB48aTNJNmho0FICOiNs0bL1J+EmD+n2+AptAkbfdQllAA08kMtdOyPLJkjKeJ+1EfVtW045jepGFZWJ740ykSl/UUC2unj5xURYZob+uAd4wNpoNdS1yQSksAtasMYxFYHvkQ4Moo/NNy0EL6+GQ2gTP24yzEiIhq4zRkbDJdhkRgNqzVOLCmoVOOXpTSXVYdOgBoUxTb8fX168vzzfvzz/dvXu19XZb4OaNvY8tIGjJXXi5wCAJ9YOcDpIjGSXEToQBPJBQeBreMLUJEAcJTuZZCniKVXCgAyxbzMkFefdhXECE/nltJBHIrILjh40mlOmJZm61O2B7DIVseviPUHBtaK9Vr3cSgV141WL/dX1Ux1IOWKiX8n6pcLkpSCUlTGeSBaLShTFAg5Z5g15ZQERgsIA876FK5gQNMjxWr9X2ILNgT/zz0/Tb2Fooxf67OTgZv/z9O2f2dEPCSQvXx0fpFvj9Oxktv9VUyEuk8VwH/aSvuMOiNsOnocZX+J3FyyJdVTspalgFccWMBQiwbTYqKz1QF/c9CF5UBIa3HFAgIpCQfq94MSyWgoamO+D0dzuRUuBlBdrDXTwGklqQZnT04vrsy8gx+mHT9OTw5uPf5cmxKR0hfoyLUtjZj8Pr0+PHirM6MyG3Q42v6AZhM1wtYp40QEg4neeULTGHt8u8cRe29I10xkQPYJl8TE6Q37cA1BNjd0BfAlFv5y54QA0KFYCQhWieKiUIzrhUIvp7PbuoFNw+j0em91eNZkif10yqzrFW015o9j9xEOreUuqGmXFxePxRppHXDndO0L/b9ClRbPX0DogMvFLRpK5I9cBchv+6JLMHzqaqvP/JOE/U8yKTQ==",options:"eJyrrgUAAXUA+Q==",customSetup:"eJyrrgUAAXUA+Q=="}),v,i("p",null,[s("所以当你尝试匹配一个自定义类型时需要注意,参考"),a(e,{to:"/Programming/Frontend/Javascript/%E5%8E%9F%E5%9E%8B(prototype).html"},{default:h(()=>[s("原型")]),_:1})]),a(t,{theme:"dark",title:"%E7%A4%BA%E4%BE%8B%20",template:"react-ts",files:"eJyFUs1Kw0AQfpVhL9lAaSDHmgZE+gTFU7eHdTuRYLqJuxMshIBHfQUfwYPgRSq+TqWvYbK2tVHbzmkG5vvbnYoF50XRJ7tgA5bOi9wQVKXFC5llV1Ld9KAZRkmCilw7JklYQ2LyOQhmUCoS7ExooYMAPl+eVu+Pq+X9avm8fnhbv34IrTJpLVxaNFAJDU1pOceBJZPqa6HrFooLpzvDRJYZAfdhGG+3Va4twSS1o9tSZrYHFmk7TGG48wQcPM//FxN2QOEh1C4o7xhoaw/OK+ffI7Tk1ZA2SlIrzBOXcUP1CxNyrvHOLXDfP4CpezCZbnqDVBoNUfxDFxUG40jlM4y/4xm0TZBKsI4hwf54gnZta6VP+dg9PffrKHB0UdBSn1Q6FmFfITwhEQVxcy/Nv7P6C65n2Js=",options:"eJyrrgUAAXUA+Q==",customSetup:"eJyrrgUAAXUA+Q=="})])}const F=p(d,[["render",B],["__file","instanceof.html.vue"]]),A=JSON.parse('{"path":"/Programming/Frontend/Javascript/instanceof.html","title":"instanceof","lang":"zh-CN","frontmatter":{"title":"instanceof","comment":false,"editLink":false,"prev":false,"next":false,"description":"简介 instanceof 运算符用来测试一个对象是否是一个类(构造函数)的实例 es6中: instanceof的原理是检测实例对象的链上是否包含目标类(构造函数)的prototype 可以这么理解: 因此如果对象继承自另一个对象,instanceof也会返回true 使用{}构建的对象 使用花括号{}构建的对象的其原型对象为Object.proto...","head":[["meta",{"property":"og:url","content":"https://vuepress-theme-hope-docs-demo.netlify.app/Programming/Frontend/Javascript/instanceof.html"}],["meta",{"property":"og:site_name","content":"一星的臭弟弟"}],["meta",{"property":"og:title","content":"instanceof"}],["meta",{"property":"og:description","content":"简介 instanceof 运算符用来测试一个对象是否是一个类(构造函数)的实例 es6中: instanceof的原理是检测实例对象的链上是否包含目标类(构造函数)的prototype 可以这么理解: 因此如果对象继承自另一个对象,instanceof也会返回true 使用{}构建的对象 使用花括号{}构建的对象的其原型对象为Object.proto..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-07-03T23:01:39.000Z"}],["meta",{"property":"article:author","content":"Cruldra"}],["meta",{"property":"article:modified_time","content":"2024-07-03T23:01:39.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"instanceof\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-07-03T23:01:39.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Cruldra\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":2,"title":"简介","slug":"简介","link":"#简介","children":[]},{"level":2,"title":"使用{}构建的对象","slug":"使用-构建的对象","link":"#使用-构建的对象","children":[]}],"git":{"createdTime":1720047699000,"updatedTime":1720047699000,"contributors":[{"name":"cruldra","email":"cruldra@gmail.com","commits":1}]},"readingTime":{"minutes":2.21,"words":662},"filePathRelative":"Programming/Frontend/Javascript/instanceof.md","localizedDate":"2024年7月3日","autoDesc":true}');export{F as comp,A as data};
