import{_ as e,o as t,c as o,e as r}from"./app-Bmelea3n.js";const a={},n=r('<h2 id="简介" tabindex="-1"><a class="header-anchor" href="#简介"><span>简介</span></a></h2><p>前端开发中涉及到的数据存储的库大致分为两大类型:</p><h2 id="持久化存储" tabindex="-1"><a class="header-anchor" href="#持久化存储"><span>持久化存储</span></a></h2><p><a href="https://www.techtarget.com/searchstorage/definition/Persistent-storage" target="_blank" rel="noopener noreferrer"><code>持久化存储(Persistent Storage)</code></a> 是指把数据存储到<code>持久化介质</code>中,以便在程序结束后仍然可以访问到这些数据.</p><p>前端中实现持久化存储的方式主要包括:</p><ul><li><a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Cookies" target="_blank" rel="noopener noreferrer"><code>Cookie</code></a></li><li><a href="https://developer.mozilla.org/en-US/docs/Web/API/Web_Storage_API" target="_blank" rel="noopener noreferrer"><code>Web Storage</code></a></li><li><a href="https://developer.mozilla.org/en-US/docs/Web/API/IndexedDB_API" target="_blank" rel="noopener noreferrer"><code>IndexedDB</code></a></li><li><a href="https://developer.mozilla.org/en-US/docs/Web/API/File_System_API" target="_blank" rel="noopener noreferrer"><code>File System API</code></a></li><li>其它各种各样的数据库,比如<code>SQLite</code>,<code>MySQL</code>,<code>MongoDB</code>等</li></ul><h2 id="响应式-状态存储" tabindex="-1"><a class="header-anchor" href="#响应式-状态存储"><span>(响应式)状态存储</span></a></h2><p><code>响应式状态管理库</code>通常利用了现代前端框架(如<code>React</code>、<code>Vue</code>)中的<code>响应式系统</code> ,让你能够创建响应式的数据流.这意味着当状态更新时,依赖于这些状态的<code>UI组件</code>会自动更新</p><p>根据不同框架(如<code>React</code>、<code>Vue</code>)中提供的<code>响应式系统</code>,<code>响应式状态管理库</code> 有非常多的选择,以下是几个主流前端框架中的<code>响应式状态管理库</code>:</p><h3 id="vue" tabindex="-1"><a class="header-anchor" href="#vue"><span>Vue</span></a></h3><ul><li><a href="https://vuex.vuejs.org/" target="_blank" rel="noopener noreferrer"><code>Vuex</code></a></li><li><a href="https://pinia.esm.dev/" target="_blank" rel="noopener noreferrer"><code>Pinia</code></a></li></ul><h3 id="react" tabindex="-1"><a class="header-anchor" href="#react"><span>React</span></a></h3><ul><li><a href="https://redux.js.org/" target="_blank" rel="noopener noreferrer"><code>Redux</code></a></li><li><a href="https://mobx.js.org/README.html" target="_blank" rel="noopener noreferrer"><code>Mobx</code></a></li><li><a href="https://docs.pmnd.rs/zustand/getting-started/introduction" target="_blank" rel="noopener noreferrer"><code>Zustand</code></a></li></ul><h3 id="svelte" tabindex="-1"><a class="header-anchor" href="#svelte"><span>Svelte</span></a></h3><h2 id="为什么需要状态管理" tabindex="-1"><a class="header-anchor" href="#为什么需要状态管理"><span>为什么需要状态管理</span></a></h2><p><code>状态管理</code>和<code>持久化存储</code>虽然本质上都是对数据的存储,但严格来说它们是两种不同的概念:</p><div class="hint-container tip"><p class="hint-container-title">提示</p><p>想象你是一位厨师,你正在准备一顿大餐.</p><p><strong>状态管理</strong>: 可以比作你正在厨房中使用的各种食材和调料.你会根据菜谱(业务逻辑)将它们组合起来,创造出美味的菜肴( 应用程序的状态).在烹饪过程中,你可能会不断尝试并调整味道,这就像在应用程序中根据用户的交互动态改变状态.整个过程是活跃的、即时的,并且随时都在变化,就像状态管理库管理应用状态那样.</p><p><strong>持久化存储</strong>: 则类似于你将制作好的菜肴放入冰箱(或冻库) 保存起来,以便将来可以重新加热并享用.即使你不在厨房,菜肴也会保持其状态,等到你准备吃的时候,可以从冰箱中取出,这就像从持久化存储中检索数据以恢复应用状态.</p></div><p>从上面的例子可以看到:</p><p><code>状态管理</code>关注的是<strong>如何在应用程序运行时管理和传递状态</strong></p><p>而<code>持久化存储</code>则关注的是<strong>如何将状态数据长期保存下来</strong></p><p>所以它们从设计思路上就不一样,自然不能混为一谈</p><h2 id="最佳实践" tabindex="-1"><a class="header-anchor" href="#最佳实践"><span>最佳实践</span></a></h2><p>通常一个应用程序中会同时使用<code>状态管理</code>和<code>持久化存储</code>,如何合理的利用这两种数据存储方式的关键点在于:</p><p><code>应用程序的状态</code>在内存中以响应式的方式管理,并且<strong>只在必要时持久化到存储中</strong></p>',24),l=[n];function c(d,i){return t(),o("div",null,l)}const p=e(a,[["render",c],["__file","简介.html.vue"]]),h=JSON.parse('{"path":"/Programming/%E5%89%8D%E7%AB%AF%E5%B8%B8%E7%94%A8%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8/%E7%AE%80%E4%BB%8B.html","title":"简介","lang":"zh-CN","frontmatter":{"title":"简介","comment":false,"editLink":false,"prev":false,"next":false,"order":1,"description":"简介 前端开发中涉及到的数据存储的库大致分为两大类型: 持久化存储 持久化存储(Persistent Storage) 是指把数据存储到持久化介质中,以便在程序结束后仍然可以访问到这些数据. 前端中实现持久化存储的方式主要包括: Cookie Web Storage IndexedDB File System API 其它各种各样的数据库,比如SQLi...","head":[["meta",{"property":"og:url","content":"https://vuepress-theme-hope-docs-demo.netlify.app/Programming/%E5%89%8D%E7%AB%AF%E5%B8%B8%E7%94%A8%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8/%E7%AE%80%E4%BB%8B.html"}],["meta",{"property":"og:site_name","content":"一星的臭弟弟"}],["meta",{"property":"og:title","content":"简介"}],["meta",{"property":"og:description","content":"简介 前端开发中涉及到的数据存储的库大致分为两大类型: 持久化存储 持久化存储(Persistent Storage) 是指把数据存储到持久化介质中,以便在程序结束后仍然可以访问到这些数据. 前端中实现持久化存储的方式主要包括: Cookie Web Storage IndexedDB File System API 其它各种各样的数据库,比如SQLi..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-07-03T23:01:39.000Z"}],["meta",{"property":"article:author","content":"Cruldra"}],["meta",{"property":"article:modified_time","content":"2024-07-03T23:01:39.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"简介\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-07-03T23:01:39.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Cruldra\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":2,"title":"简介","slug":"简介","link":"#简介","children":[]},{"level":2,"title":"持久化存储","slug":"持久化存储","link":"#持久化存储","children":[]},{"level":2,"title":"(响应式)状态存储","slug":"响应式-状态存储","link":"#响应式-状态存储","children":[{"level":3,"title":"Vue","slug":"vue","link":"#vue","children":[]},{"level":3,"title":"React","slug":"react","link":"#react","children":[]},{"level":3,"title":"Svelte","slug":"svelte","link":"#svelte","children":[]}]},{"level":2,"title":"为什么需要状态管理","slug":"为什么需要状态管理","link":"#为什么需要状态管理","children":[]},{"level":2,"title":"最佳实践","slug":"最佳实践","link":"#最佳实践","children":[]}],"git":{"createdTime":1720047699000,"updatedTime":1720047699000,"contributors":[{"name":"cruldra","email":"cruldra@gmail.com","commits":1}]},"readingTime":{"minutes":2.5,"words":751},"filePathRelative":"Programming/前端常用库/数据存储/简介.md","localizedDate":"2024年7月3日","autoDesc":true}');export{p as comp,h as data};
