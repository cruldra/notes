import{_ as i,o as s,c as e,e as a}from"./app-Bmelea3n.js";const n={},t=a(`<h2 id="简介" tabindex="-1"><a class="header-anchor" href="#简介"><span>简介</span></a></h2><p><code>JWT(JSON Web Tokens)</code>是一种<a href="https://datatracker.ietf.org/doc/html/rfc7519" target="_blank" rel="noopener noreferrer"><code>开放标准(RFC 7519)</code></a>,它定义了一种紧凑和自包含的方式,用于在各方之间安全地以<code>JSON</code>对象的形式传输信息</p><h3 id="紧凑" tabindex="-1"><a class="header-anchor" href="#紧凑"><span>紧凑</span></a></h3><p>指的是<code>JWT</code>的大小很小,这使得它可以在<code>URL</code>、<code>POST</code>参数或者<code>HTTP</code>头部发送,并且在<code>HTTP</code>环境中传输的开销也很小</p><h3 id="自包含" tabindex="-1"><a class="header-anchor" href="#自包含"><span>自包含</span></a></h3><p>指的是<code>JWT</code>本身包含了所有<code>用户所需要的信息</code>,避免了多次查询数据库.具体见<a href="https://poe.com/s/2C52r5B3tMkdOBFBwBOQ" target="_blank" rel="noopener noreferrer">gpt4对自包含的解释</a></p><h2 id="结构" tabindex="-1"><a class="header-anchor" href="#结构"><span>结构</span></a></h2><p><code>JWT</code>由三部分组成,分别是<code>Header</code>,<code>Payload</code>和<code>Signature</code></p><h3 id="header-头部" tabindex="-1"><a class="header-anchor" href="#header-头部"><span>Header(头部)</span></a></h3><p><code>Header</code>部分用于描述<code>JWT</code>的元数据,例如<code>签名算法</code>和<code>类型</code></p><div class="language-json line-numbers-mode" data-highlighter="shiki" data-ext="json" data-title="json" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#E06C75;">  &quot;alg&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;HS256&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#E06C75;">  &quot;typ&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;JWT&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="payload-负载" tabindex="-1"><a class="header-anchor" href="#payload-负载"><span>Payload(负载)</span></a></h3><p><code>Payload</code>部分用于存放需要传输的数据,它包含了一些<code>预定义的字段</code>,以及一些<code>自定义的字段</code></p><div class="language-json line-numbers-mode" data-highlighter="shiki" data-ext="json" data-title="json" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#E06C75;">  &quot;sub&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;1234567890&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#E06C75;">  &quot;name&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;John Doe&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#E06C75;">  &quot;iat&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">1516239022</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="signature-签名" tabindex="-1"><a class="header-anchor" href="#signature-签名"><span>Signature(签名)</span></a></h3><p><code>Signature</code>部分用于对<code>Header</code>和<code>Payload</code>进行签名,防止数据被篡改</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;"> signature</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> HMACSHA256</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">    base64UrlEncode</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">header</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">+</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> &quot;.&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> +</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">    base64UrlEncode</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">payload</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">    secret</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">// 要签名的字符串 : \`base64(头部).base64(负载)\`</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">// secret : 签名用的密钥</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">// 最终生成的签名(signature)类似:TJVA95OrM7E2cBab30RMHrHDcEfxjoYZgeFONFh7HgQ</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>最后把上面三个部分用<code>.</code>连接起来,就构成了<code>JWT</code></p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">base64UrlEncode</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">header</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">+</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> &quot;.&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> +</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> base64UrlEncode</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">payload</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">+</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> &quot;.&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> signature</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">//eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9.TJVA95OrM7E2cBab30RMHrHDcEfxjoYZgeFONFh7HgQ</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="应用场景" tabindex="-1"><a class="header-anchor" href="#应用场景"><span>应用场景</span></a></h2><ol><li><a href="https://zhuanlan.zhihu.com/p/342755411" target="_blank" rel="noopener noreferrer">Spring Security + JWT实现前后端分离下的认证授权</a></li><li><a href="https://poe.com/s/VrsibtNpk1tTGW99JfSf" target="_blank" rel="noopener noreferrer">另外几种应用场景</a></li></ol>`,21),l=[t];function h(r,d){return s(),e("div",null,l)}const k=i(n,[["render",h],["__file","JWT.html.vue"]]),o=JSON.parse('{"path":"/Programming/%E5%BC%80%E6%94%BE%E6%A0%87%E5%87%86/JWT.html","title":"JWT","lang":"zh-CN","frontmatter":{"title":"JWT","comment":false,"editLink":false,"prev":false,"next":false,"order":1,"description":"简介 JWT(JSON Web Tokens)是一种开放标准(RFC 7519),它定义了一种紧凑和自包含的方式,用于在各方之间安全地以JSON对象的形式传输信息 紧凑 指的是JWT的大小很小,这使得它可以在URL、POST参数或者HTTP头部发送,并且在HTTP环境中传输的开销也很小 自包含 指的是JWT本身包含了所有用户所需要的信息,避免了多次查询...","head":[["meta",{"property":"og:url","content":"https://vuepress-theme-hope-docs-demo.netlify.app/Programming/%E5%BC%80%E6%94%BE%E6%A0%87%E5%87%86/JWT.html"}],["meta",{"property":"og:site_name","content":"一星的臭弟弟"}],["meta",{"property":"og:title","content":"JWT"}],["meta",{"property":"og:description","content":"简介 JWT(JSON Web Tokens)是一种开放标准(RFC 7519),它定义了一种紧凑和自包含的方式,用于在各方之间安全地以JSON对象的形式传输信息 紧凑 指的是JWT的大小很小,这使得它可以在URL、POST参数或者HTTP头部发送,并且在HTTP环境中传输的开销也很小 自包含 指的是JWT本身包含了所有用户所需要的信息,避免了多次查询..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-07-03T23:01:39.000Z"}],["meta",{"property":"article:author","content":"Cruldra"}],["meta",{"property":"article:modified_time","content":"2024-07-03T23:01:39.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"JWT\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-07-03T23:01:39.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Cruldra\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":2,"title":"简介","slug":"简介","link":"#简介","children":[{"level":3,"title":"紧凑","slug":"紧凑","link":"#紧凑","children":[]},{"level":3,"title":"自包含","slug":"自包含","link":"#自包含","children":[]}]},{"level":2,"title":"结构","slug":"结构","link":"#结构","children":[{"level":3,"title":"Header(头部)","slug":"header-头部","link":"#header-头部","children":[]},{"level":3,"title":"Payload(负载)","slug":"payload-负载","link":"#payload-负载","children":[]},{"level":3,"title":"Signature(签名)","slug":"signature-签名","link":"#signature-签名","children":[]}]},{"level":2,"title":"应用场景","slug":"应用场景","link":"#应用场景","children":[]}],"git":{"createdTime":1720047699000,"updatedTime":1720047699000,"contributors":[{"name":"cruldra","email":"cruldra@gmail.com","commits":1}]},"readingTime":{"minutes":1.26,"words":377},"filePathRelative":"Programming/开放标准/JWT.md","localizedDate":"2024年7月3日","autoDesc":true}');export{k as comp,o as data};
