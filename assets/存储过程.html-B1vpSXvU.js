import{_ as s,o as i,c as a,e as n}from"./app-Bmelea3n.js";const e={},l=n(`<h2 id="简介" tabindex="-1"><a class="header-anchor" href="#简介"><span>简介</span></a></h2><p><code>存储过程(Stored Procedure)</code>是一种预编译的<code>SQL</code>代码块,可以在数据库中存储并多次调用.它可以接受参数,并返回结果.</p><h2 id="创建" tabindex="-1"><a class="header-anchor" href="#创建"><span>创建</span></a></h2><p><code>mysql</code>中创建<a href="https://dev.mysql.com/doc/refman/8.0/en/create-procedure.html" target="_blank" rel="noopener noreferrer">存储过程</a>的语法格式如下:</p><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" data-title="sql" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">CREATE</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">    [DEFINER = user]</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    PROCEDURE</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> [IF NOT EXISTS]</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> sp_name (</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">[proc_parameter[,...]</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">])</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">    [characteristic ...]</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> routine_body</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">CREATE</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">    [DEFINER = user]</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    FUNCTION</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> [IF NOT EXISTS]</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> sp_name (</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">[func_parameter[,...]</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">])</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    RETURNS</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> type</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">    [characteristic ...]</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> routine_body</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">proc_parameter:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">    [ IN | OUT | INOUT ]</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> param_name </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">type</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">func_parameter:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    param_name </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">type</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">type</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    Any valid MySQL </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">data</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> type</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">characteristic: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    COMMENT </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&#39;string&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">  | </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">LANGUAGE</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> SQL</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">  | </span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">[NOT]</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> DETERMINISTIC</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">  | { CONTAINS </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">SQL</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> | </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">NO</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> SQL</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> | READS </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">SQL</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> DATA</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> | MODIFIES </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">SQL</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> DATA</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">  | </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">SQL</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> SECURITY</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> { DEFINER | INVOKER }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">routine_body:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    Valid </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">SQL</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> routine </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">statement</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,5),t=[l];function p(h,r){return i(),a("div",null,t)}const d=s(e,[["render",p],["__file","存储过程.html.vue"]]),c=JSON.parse('{"path":"/Databases/Mysql/%E5%AD%98%E5%82%A8%E8%BF%87%E7%A8%8B.html","title":"存储过程","lang":"zh-CN","frontmatter":{"title":"存储过程","comment":false,"editLink":false,"prev":false,"next":false,"description":"简介 存储过程(Stored Procedure)是一种预编译的SQL代码块,可以在数据库中存储并多次调用.它可以接受参数,并返回结果. 创建 mysql中创建存储过程的语法格式如下:","head":[["meta",{"property":"og:url","content":"https://vuepress-theme-hope-docs-demo.netlify.app/Databases/Mysql/%E5%AD%98%E5%82%A8%E8%BF%87%E7%A8%8B.html"}],["meta",{"property":"og:site_name","content":"一星的臭弟弟"}],["meta",{"property":"og:title","content":"存储过程"}],["meta",{"property":"og:description","content":"简介 存储过程(Stored Procedure)是一种预编译的SQL代码块,可以在数据库中存储并多次调用.它可以接受参数,并返回结果. 创建 mysql中创建存储过程的语法格式如下:"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-07-03T23:01:39.000Z"}],["meta",{"property":"article:author","content":"Cruldra"}],["meta",{"property":"article:modified_time","content":"2024-07-03T23:01:39.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"存储过程\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-07-03T23:01:39.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Cruldra\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":2,"title":"简介","slug":"简介","link":"#简介","children":[]},{"level":2,"title":"创建","slug":"创建","link":"#创建","children":[]}],"git":{"createdTime":1720047699000,"updatedTime":1720047699000,"contributors":[{"name":"cruldra","email":"cruldra@gmail.com","commits":1}]},"readingTime":{"minutes":0.5,"words":150},"filePathRelative":"Databases/Mysql/存储过程.md","localizedDate":"2024年7月3日","autoDesc":true}');export{d as comp,c as data};
