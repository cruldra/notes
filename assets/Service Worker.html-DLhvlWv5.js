import{_ as i,o as s,c as e,e as a}from"./app-Bmelea3n.js";const r={},n=a(`<h2 id="简介" tabindex="-1"><a class="header-anchor" href="#简介"><span>简介</span></a></h2><p><a href="https://developer.mozilla.org/en-US/docs/Web/API/Service_Worker_API" target="_blank" rel="noopener noreferrer"><code>Service Worker</code></a>是一种在<code>Web</code> 浏览器中运行的脚本,它是一个本地网页和服务器之间的代理服务器.</p><p><code>Service Worker</code>被设计用于提高<code>Web</code>应用程序的离线体验,它可以拦截和处理特定的网络请求,这意味着你可以在用户离线时从缓存中提供先前已缓存的内容.基于这一特点,也可以将其用于推送通知、后台同步等功能.</p><h2 id="应用场景" tabindex="-1"><a class="header-anchor" href="#应用场景"><span>应用场景</span></a></h2><ul><li><strong>离线缓存</strong> - 通过拦截和处理特定的网络请求,你可以在用户离线时从缓存中提供先前已缓存的内容,这次大大提高<code>Web</code>应用程序的离线体验</li><li><strong>推送通知</strong> - 即使在用户没有打开网站的情况下,<code>Service Worker</code>也可以接收服务器的推送通知,并显示给用户</li><li><strong>后台同步</strong> - <code>Service Worker</code> 可以在后台自动同步数据,比如说在没有网络连接时,应用可以允许用户继续阅读和修改数据,一旦网络恢复,<code>Service Worker</code> 可以将本地更改同步到服务器</li></ul><h2 id="浏览器支持" tabindex="-1"><a class="header-anchor" href="#浏览器支持"><span>浏览器支持</span></a></h2><p><a href="https://developer.mozilla.org/en-US/docs/Web/API/Service_Worker_API" target="_blank" rel="noopener noreferrer"><code>Service Worker</code></a>是一项<code>Web</code> 标准,需要浏览器提供支持,目前主流的浏览器都支持</p><h3 id="检查浏览器对service-worker的支持" tabindex="-1"><a class="header-anchor" href="#检查浏览器对service-worker的支持"><span>检查浏览器对<code>Service Worker</code>的支持</span></a></h3><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&#39;serviceWorker&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> in</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> navigator</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">  // Service Worker 支持的代码</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">  navigator</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">serviceWorker</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">register</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&#39;/service-worker.js&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">then</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">registration</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">    // 注册成功</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">    console</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&#39;Service Worker 注册成功:&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">registration</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">  }).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">catch</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">error</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">    // 注册失败</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">    console</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&#39;Service Worker 注册失败:&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">error</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">  });</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">} </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">else</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">  // 浏览器不支持 Service Worker</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">  console</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&#39;此浏览器不支持 Service Worker。&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="各浏览器对service-worker的支持情况" tabindex="-1"><a class="header-anchor" href="#各浏览器对service-worker的支持情况"><span>各浏览器对<code>Service Worker</code>的支持情况</span></a></h3><ul><li><a href="https://poe.com/s/PyxEAdnuqlhtaaQjjWyQ" target="_blank" rel="noopener noreferrer">ie和safari</a></li></ul>`,11),t=[n];function l(h,k){return s(),e("div",null,t)}const o=i(r,[["render",l],["__file","Service Worker.html.vue"]]),d=JSON.parse('{"path":"/Programming/Frontend/Service%20Worker.html","title":"Service Worker","lang":"zh-CN","frontmatter":{"title":"Service Worker","comment":false,"editLink":false,"prev":false,"next":false,"order":1,"description":"简介 Service Worker是一种在Web 浏览器中运行的脚本,它是一个本地网页和服务器之间的代理服务器. Service Worker被设计用于提高Web应用程序的离线体验,它可以拦截和处理特定的网络请求,这意味着你可以在用户离线时从缓存中提供先前已缓存的内容.基于这一特点,也可以将其用于推送通知、后台同步等功能. 应用场景 离线缓存 - 通过...","head":[["meta",{"property":"og:url","content":"https://vuepress-theme-hope-docs-demo.netlify.app/Programming/Frontend/Service%20Worker.html"}],["meta",{"property":"og:site_name","content":"一星的臭弟弟"}],["meta",{"property":"og:title","content":"Service Worker"}],["meta",{"property":"og:description","content":"简介 Service Worker是一种在Web 浏览器中运行的脚本,它是一个本地网页和服务器之间的代理服务器. Service Worker被设计用于提高Web应用程序的离线体验,它可以拦截和处理特定的网络请求,这意味着你可以在用户离线时从缓存中提供先前已缓存的内容.基于这一特点,也可以将其用于推送通知、后台同步等功能. 应用场景 离线缓存 - 通过..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-07-03T23:01:39.000Z"}],["meta",{"property":"article:author","content":"Cruldra"}],["meta",{"property":"article:modified_time","content":"2024-07-03T23:01:39.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Service Worker\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-07-03T23:01:39.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Cruldra\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":2,"title":"简介","slug":"简介","link":"#简介","children":[]},{"level":2,"title":"应用场景","slug":"应用场景","link":"#应用场景","children":[]},{"level":2,"title":"浏览器支持","slug":"浏览器支持","link":"#浏览器支持","children":[{"level":3,"title":"检查浏览器对Service Worker的支持","slug":"检查浏览器对service-worker的支持","link":"#检查浏览器对service-worker的支持","children":[]},{"level":3,"title":"各浏览器对Service Worker的支持情况","slug":"各浏览器对service-worker的支持情况","link":"#各浏览器对service-worker的支持情况","children":[]}]}],"git":{"createdTime":1720047699000,"updatedTime":1720047699000,"contributors":[{"name":"cruldra","email":"cruldra@gmail.com","commits":1}]},"readingTime":{"minutes":1.47,"words":441},"filePathRelative":"Programming/Frontend/Service Worker.md","localizedDate":"2024年7月3日","autoDesc":true}');export{o as comp,d as data};
