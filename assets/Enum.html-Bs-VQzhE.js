import{_ as i,o as s,c as a,e as n}from"./app-Bmelea3n.js";const e={},t=n(`<h2 id="简介" tabindex="-1"><a class="header-anchor" href="#简介"><span>简介</span></a></h2><p>在<code>SpringData JPA</code>中使用<code>枚举(enum)</code>类型映射数据库字段有几个好处:</p><ol><li><strong>类型安全</strong> - 枚举提供了一种类型安全的方式来表示固定的常量集合.使用枚举可以确保只有预定义的值能被赋予相应的字段,这样可以避免无效值的出现并且在编译时就能发现潜在错误.</li><li><strong>代码可读性</strong> - 枚举使代码更加易读.通过使用明确命名的枚举值,代码的可读性和可维护性得到提高,因为它们比原始数值或字符串更能清楚地表达意图.</li><li><strong>重构友好</strong> - 在代码库中重构枚举类型通常比重构分散在代码中的字符串或整数常量更加安全和简单.</li><li><strong>业务逻辑清晰</strong> - 枚举可以将业务逻辑与数据模型紧密结合,使得业务状态和行为的表示更加集中和一致.</li><li><strong>数据一致性</strong> - 数据库中的字段值将受到Java代码中枚举定义的约束,这有助于保持数据的一致性.</li><li><strong>易于使用查询方法</strong> - 在<code>SpringData JPA</code>仓库中,你可以直接使用枚举类型作为查询方法的参数,而无需进行额外的转换.</li></ol><h2 id="使用" tabindex="-1"><a class="header-anchor" href="#使用"><span>使用</span></a></h2><ol><li>创建业务枚举</li></ol><div class="language-kotlin line-numbers-mode" data-highlighter="shiki" data-ext="kotlin" data-title="kotlin" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">enum</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;"> UrlType</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    PAGE,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    POPUP</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>在实体类中使用枚举</li></ol><div class="language-kotlin line-numbers-mode" data-highlighter="shiki" data-ext="kotlin" data-title="kotlin" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;">@Entity</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;">@Table</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(name </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> &quot;zm_entrance&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;"> ZmEntrance</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> : </span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;">AbstractPersistable</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;">Long</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;() {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">    /**</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">     * 跳转方式</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">     */</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;">    @Enumerated</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(EnumType.STRING)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;">    @Lob</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;">    @Column</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(name </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> &quot;url_type&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, nullable </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> false</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    var</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> urlType: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;">UrlType</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> UrlType.PAGE</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,8),l=[t];function h(r,p){return s(),a("div",null,l)}const d=i(e,[["render",h],["__file","Enum.html.vue"]]),o=JSON.parse('{"path":"/Programming/SpringBoot/Data/JPA/%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2%E5%99%A8/Enum.html","title":"Enum","lang":"zh-CN","frontmatter":{"title":"Enum","comment":false,"editLink":false,"prev":false,"next":false,"description":"简介 在SpringData JPA中使用枚举(enum)类型映射数据库字段有几个好处: 类型安全 - 枚举提供了一种类型安全的方式来表示固定的常量集合.使用枚举可以确保只有预定义的值能被赋予相应的字段,这样可以避免无效值的出现并且在编译时就能发现潜在错误. 代码可读性 - 枚举使代码更加易读.通过使用明确命名的枚举值,代码的可读性和可维护性得到提高,...","head":[["meta",{"property":"og:url","content":"https://vuepress-theme-hope-docs-demo.netlify.app/Programming/SpringBoot/Data/JPA/%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2%E5%99%A8/Enum.html"}],["meta",{"property":"og:site_name","content":"一星的臭弟弟"}],["meta",{"property":"og:title","content":"Enum"}],["meta",{"property":"og:description","content":"简介 在SpringData JPA中使用枚举(enum)类型映射数据库字段有几个好处: 类型安全 - 枚举提供了一种类型安全的方式来表示固定的常量集合.使用枚举可以确保只有预定义的值能被赋予相应的字段,这样可以避免无效值的出现并且在编译时就能发现潜在错误. 代码可读性 - 枚举使代码更加易读.通过使用明确命名的枚举值,代码的可读性和可维护性得到提高,..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-07-03T23:01:39.000Z"}],["meta",{"property":"article:author","content":"Cruldra"}],["meta",{"property":"article:modified_time","content":"2024-07-03T23:01:39.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Enum\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-07-03T23:01:39.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Cruldra\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":2,"title":"简介","slug":"简介","link":"#简介","children":[]},{"level":2,"title":"使用","slug":"使用","link":"#使用","children":[]}],"git":{"createdTime":1720047699000,"updatedTime":1720047699000,"contributors":[{"name":"cruldra","email":"cruldra@gmail.com","commits":1}]},"readingTime":{"minutes":1.37,"words":410},"filePathRelative":"Programming/SpringBoot/Data/JPA/类型转换器/Enum.md","localizedDate":"2024年7月3日","autoDesc":true}');export{d as comp,o as data};
