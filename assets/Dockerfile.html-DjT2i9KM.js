import{_ as i,o as s,c as e,e as a}from"./app-Bmelea3n.js";const l={},t=a(`<h2 id="简介" tabindex="-1"><a class="header-anchor" href="#简介"><span>简介</span></a></h2><h2 id="arg指令" tabindex="-1"><a class="header-anchor" href="#arg指令"><span><code>ARG</code>指令</span></a></h2><p>假如想在构建的时候传一个参数给<code>Dockerfile</code>,然后<code>Dockerfile</code>利用它来设置一个<code>ENV</code>给程序使用,就可以用到这个参数</p><p><code>Dockerfile</code>内容如下:</p><div class="language-dockerfile line-numbers-mode" data-highlighter="shiki" data-ext="dockerfile" data-title="dockerfile" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"># Dockerfile</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#61AFEF;">FROM</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> node:latest</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"># 定义一个参数</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#61AFEF;">ARG</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> AXIOS_BASE_URL</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"># 设置环境变量，其值来自于 ARG</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#61AFEF;">ENV</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> NEXT_PUBLIC_AXIOS_BASE_URL \${AXIOS_BASE_URL}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后在构建的时候传入参数:</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> build</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> --build-arg</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> AXIOS_BASE_URL=https://your-api-url.com</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> -t</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> your-image-name</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> .</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h2 id="cmd指令" tabindex="-1"><a class="header-anchor" href="#cmd指令"><span><code>CMD</code>指令</span></a></h2><h3 id="实践" tabindex="-1"><a class="header-anchor" href="#实践"><span>实践</span></a></h3><ol><li>确保容器不会退出以便调试</li></ol><div class="language-dockerfile line-numbers-mode" data-highlighter="shiki" data-ext="dockerfile" data-title="dockerfile" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#61AFEF;">CMD</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> [</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;tail&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;-f&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;/dev/null&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h2 id="shell指令" tabindex="-1"><a class="header-anchor" href="#shell指令"><span><code>SHELL</code>指令</span></a></h2><p><code>SHELL</code>指令用于更改用于执行随后的<code>RUN</code>、<code>CMD</code>和<code>ENTRYPOINT</code>指令的默认<code>shell</code></p><div class="language-dockerfile line-numbers-mode" data-highlighter="shiki" data-ext="dockerfile" data-title="dockerfile" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"># linux默认</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#61AFEF;">SHELL</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> [</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;/bin/sh&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;-c&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">]</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"># windows默认</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#61AFEF;">SHELL</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> [</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;cmd&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;/S&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;/C&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">]</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"># 设置linux默认shell为bash</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#61AFEF;">SHELL</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> [</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;/bin/bash&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;-c&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,14),n=[t];function h(r,d){return s(),e("div",null,n)}const p=i(l,[["render",h],["__file","Dockerfile.html.vue"]]),c=JSON.parse('{"path":"/Tools/Docker/Dockerfile.html","title":"Dockerfile","lang":"zh-CN","frontmatter":{"title":"Dockerfile","comment":false,"editLink":false,"prev":false,"next":false,"order":1,"description":"简介 ARG指令 假如想在构建的时候传一个参数给Dockerfile,然后Dockerfile利用它来设置一个ENV给程序使用,就可以用到这个参数 Dockerfile内容如下: 然后在构建的时候传入参数: CMD指令 实践 确保容器不会退出以便调试 SHELL指令 SHELL指令用于更改用于执行随后的RUN、CMD和ENTRYPOINT指令的默认shell","head":[["meta",{"property":"og:url","content":"https://vuepress-theme-hope-docs-demo.netlify.app/Tools/Docker/Dockerfile.html"}],["meta",{"property":"og:site_name","content":"一星的臭弟弟"}],["meta",{"property":"og:title","content":"Dockerfile"}],["meta",{"property":"og:description","content":"简介 ARG指令 假如想在构建的时候传一个参数给Dockerfile,然后Dockerfile利用它来设置一个ENV给程序使用,就可以用到这个参数 Dockerfile内容如下: 然后在构建的时候传入参数: CMD指令 实践 确保容器不会退出以便调试 SHELL指令 SHELL指令用于更改用于执行随后的RUN、CMD和ENTRYPOINT指令的默认shell"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-07-03T23:01:39.000Z"}],["meta",{"property":"article:author","content":"Cruldra"}],["meta",{"property":"article:modified_time","content":"2024-07-03T23:01:39.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Dockerfile\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-07-03T23:01:39.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Cruldra\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":2,"title":"简介","slug":"简介","link":"#简介","children":[]},{"level":2,"title":"ARG指令","slug":"arg指令","link":"#arg指令","children":[]},{"level":2,"title":"CMD指令","slug":"cmd指令","link":"#cmd指令","children":[{"level":3,"title":"实践","slug":"实践","link":"#实践","children":[]}]},{"level":2,"title":"SHELL指令","slug":"shell指令","link":"#shell指令","children":[]}],"git":{"createdTime":1720047699000,"updatedTime":1720047699000,"contributors":[{"name":"cruldra","email":"cruldra@gmail.com","commits":1}]},"readingTime":{"minutes":0.65,"words":194},"filePathRelative":"Tools/Docker/Dockerfile.md","localizedDate":"2024年7月3日","autoDesc":true}');export{p as comp,c as data};
