import{_ as e,o as t,c as i,e as s}from"./app-Bmelea3n.js";const n={},a=s(`<h2 id="简介" tabindex="-1"><a class="header-anchor" href="#简介"><span>简介</span></a></h2><p>一般情况下我们使用<a href="https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/web/bind/annotation/ResponseBody.html" target="_blank" rel="noopener noreferrer">ResponseBody</a>来返回一个<code>json</code>格式的响应数据,但是有时候我们需要自定义响应数据,比如设置响应头,设置响应状态码等</p><p>这就需要用到<a href="https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/http/ResponseEntity.html" target="_blank" rel="noopener noreferrer">ResponseEntity</a>用于封装响应数据,例如:</p><div class="language-kotlin line-numbers-mode" data-highlighter="shiki" data-ext="kotlin" data-title="kotlin" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">ResponseEntity</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">status</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(HttpStatus.OK)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">contentType</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(MediaType.TEXT_HTML) </span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">// 设置Content-Type为text/html</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">body</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;Refresh token not provided&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="在异常处理中使用" tabindex="-1"><a class="header-anchor" href="#在异常处理中使用"><span>在异常处理中使用</span></a></h2><p><strong>通过将异常封装到<code>ResponseEntity</code>中,可以灵活地控制异常响应的内容和状态码,方便统一异常处理</strong></p>`,6),r=[a];function o(p,l){return t(),i("div",null,r)}const d=e(n,[["render",o],["__file","自定义响应.html.vue"]]),c=JSON.parse('{"path":"/Programming/SpringBoot/WebMvc/%E8%87%AA%E5%AE%9A%E4%B9%89%E5%93%8D%E5%BA%94.html","title":"自定义响应","lang":"zh-CN","frontmatter":{"title":"自定义响应","comment":false,"editLink":false,"prev":false,"next":false,"description":"简介 一般情况下我们使用ResponseBody来返回一个json格式的响应数据,但是有时候我们需要自定义响应数据,比如设置响应头,设置响应状态码等 这就需要用到ResponseEntity用于封装响应数据,例如: 在异常处理中使用 通过将异常封装到ResponseEntity中,可以灵活地控制异常响应的内容和状态码,方便统一异常处理","head":[["meta",{"property":"og:url","content":"https://vuepress-theme-hope-docs-demo.netlify.app/Programming/SpringBoot/WebMvc/%E8%87%AA%E5%AE%9A%E4%B9%89%E5%93%8D%E5%BA%94.html"}],["meta",{"property":"og:site_name","content":"一星的臭弟弟"}],["meta",{"property":"og:title","content":"自定义响应"}],["meta",{"property":"og:description","content":"简介 一般情况下我们使用ResponseBody来返回一个json格式的响应数据,但是有时候我们需要自定义响应数据,比如设置响应头,设置响应状态码等 这就需要用到ResponseEntity用于封装响应数据,例如: 在异常处理中使用 通过将异常封装到ResponseEntity中,可以灵活地控制异常响应的内容和状态码,方便统一异常处理"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-07-03T23:01:39.000Z"}],["meta",{"property":"article:author","content":"Cruldra"}],["meta",{"property":"article:modified_time","content":"2024-07-03T23:01:39.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"自定义响应\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-07-03T23:01:39.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Cruldra\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":2,"title":"简介","slug":"简介","link":"#简介","children":[]},{"level":2,"title":"在异常处理中使用","slug":"在异常处理中使用","link":"#在异常处理中使用","children":[]}],"git":{"createdTime":1720047699000,"updatedTime":1720047699000,"contributors":[{"name":"cruldra","email":"cruldra@gmail.com","commits":1}]},"readingTime":{"minutes":0.52,"words":157},"filePathRelative":"Programming/SpringBoot/WebMvc/自定义响应.md","localizedDate":"2024年7月3日","autoDesc":true}');export{d as comp,c as data};
