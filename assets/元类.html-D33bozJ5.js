import{_ as i,o as s,c as a,e as n}from"./app-Bmelea3n.js";const t={},l=n(`<p><code>元类(Meta Classes)</code>是<code>Python</code>中一个高级且复杂的特性,它们主要用于创建类本身.</p><p><strong>元类允许你拦截类的创建过程,修改类的定义,或返回不同于原本请求的新类.</strong></p><p>简而言之,元类是类的类;正如类定义了对象的行为,元类定义了类的行为.</p><p>使用元类可以实现多种高级模式,包括:</p><ul><li>拦截类的创建</li><li>修改类的属性</li><li>注册类（在创建时做记录）</li><li>自动委托方法包装</li><li>提供接口或抽象类的实现</li><li>实现单例模式</li></ul><p>下面是一个简单的元类使用示例，这个元类会确保类中所有的方法都是小写的：</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"># 定义一个元类，它继承自 type</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;"> LowercaseMetaclass</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2;">type</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">):</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    def</span><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2;"> __new__</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">cls</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#24292E;--shiki-dark:#D19A66;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">clsname</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#24292E;--shiki-dark:#D19A66;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">bases</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#24292E;--shiki-dark:#D19A66;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">dct</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">):</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">        # 创建一个新的类字典</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">        lowercase_attr </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> {}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">        for</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> name, val </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">in</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> dct.</span><span style="--shiki-light:#24292E;--shiki-dark:#61AFEF;">items</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">():</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">            if</span><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2;"> callable</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(val):</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">                lowercase_attr[name.</span><span style="--shiki-light:#24292E;--shiki-dark:#61AFEF;">lower</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">()] </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> val</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">            else</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">                lowercase_attr[name] </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> val</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">        </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">        # 使用 type 创建新类</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">        return</span><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2;"> type</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2;">__new__</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;">cls</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, clsname, bases, lowercase_attr)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"># 使用这个元类来创建一个类</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;"> MyClass</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#ABB2BF;">metaclass</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;">LowercaseMetaclass</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">):</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> SAY_HELLO</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">self</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">):</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2;">        print</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;Hello!&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"># MyClass 现在有了一个小写的方法 &#39;say_hello&#39; 而不是 &#39;SAY_HELLO&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">instance </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#61AFEF;"> MyClass</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">instance.</span><span style="--shiki-light:#24292E;--shiki-dark:#61AFEF;">say_hello</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">()  </span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"># 正确</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">instance.</span><span style="--shiki-light:#24292E;--shiki-dark:#61AFEF;">SAY_HELLO</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">()  </span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"># 会抛出 AttributeError</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个例子中，LowercaseMetaclass 继承自 type 并重写了 <strong>new</strong> 方法，在创建新类时将所有方法名转换为小写字母。这个特殊的 <strong>new</strong> 方法在类的创建时被调用，允许我们在类最终被创建之前修改其属性。</p><p>元类通常用于框架和库中，普通应用程序很少需要使用它们。如果你发现自己需要使用元类，务必确保你清楚地了解它们是如何工作的，因为不当使用可能会导致难以理解和维护的代码。</p>`,9),e=[l];function h(k,p){return s(),a("div",null,e)}const d=i(t,[["render",h],["__file","元类.html.vue"]]),c=JSON.parse('{"path":"/Programming/Python/%E7%B1%BB/%E5%85%83%E7%B1%BB.html","title":"元类","lang":"zh-CN","frontmatter":{"title":"元类","comment":false,"editLink":false,"prev":false,"next":false,"description":"元类(Meta Classes)是Python中一个高级且复杂的特性,它们主要用于创建类本身. 元类允许你拦截类的创建过程,修改类的定义,或返回不同于原本请求的新类. 简而言之,元类是类的类;正如类定义了对象的行为,元类定义了类的行为. 使用元类可以实现多种高级模式,包括: 拦截类的创建 修改类的属性 注册类（在创建时做记录） 自动委托方法包装 提供接...","head":[["meta",{"property":"og:url","content":"https://vuepress-theme-hope-docs-demo.netlify.app/Programming/Python/%E7%B1%BB/%E5%85%83%E7%B1%BB.html"}],["meta",{"property":"og:site_name","content":"一星的臭弟弟"}],["meta",{"property":"og:title","content":"元类"}],["meta",{"property":"og:description","content":"元类(Meta Classes)是Python中一个高级且复杂的特性,它们主要用于创建类本身. 元类允许你拦截类的创建过程,修改类的定义,或返回不同于原本请求的新类. 简而言之,元类是类的类;正如类定义了对象的行为,元类定义了类的行为. 使用元类可以实现多种高级模式,包括: 拦截类的创建 修改类的属性 注册类（在创建时做记录） 自动委托方法包装 提供接..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-07-03T23:01:39.000Z"}],["meta",{"property":"article:author","content":"Cruldra"}],["meta",{"property":"article:modified_time","content":"2024-07-03T23:01:39.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"元类\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-07-03T23:01:39.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Cruldra\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[],"git":{"createdTime":1720047699000,"updatedTime":1720047699000,"contributors":[{"name":"cruldra","email":"cruldra@gmail.com","commits":1}]},"readingTime":{"minutes":1.52,"words":456},"filePathRelative":"Programming/Python/类/元类.md","localizedDate":"2024年7月3日","autoDesc":true}');export{d as comp,c as data};
