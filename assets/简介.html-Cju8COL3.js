import{_ as t,r as n,o as l,c as r,d as e,a as i,e as a}from"./app-Bmelea3n.js";const h={},d=i("h2",{id:"简单的示例",tabindex:"-1"},[i("a",{class:"header-anchor",href:"#简单的示例"},[i("span",null,"简单的示例")])],-1),p=a(`<p>上面的代码首先在<code>index.tsx</code>中定义了三个路由:</p><div class="language-ts line-numbers-mode" data-highlighter="shiki" data-ext="ts" data-title="ts" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;"> router</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> createBrowserRouter</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">([</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">        path</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;/&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">        element</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: &lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;">App</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> / &gt;,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">        path</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;/pageA&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">        element</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: &lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;">PageA</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> / &gt;,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    }, {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">        path</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;/pageB&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">        element</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: &lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;">PageB</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> / &gt;,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">]);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>页面链接和渲染的组件的关系如下:</p><table><thead><tr><th>链接</th><th>组件</th></tr></thead><tbody><tr><td><code>/</code></td><td><code>App.tsx</code></td></tr><tr><td><code>/pageA</code></td><td><code>PageA.tsx</code></td></tr><tr><td><code>/pageB</code></td><td><code>PageB.tsx</code></td></tr></tbody></table><p>然后将整个<code>SPA</code> 应用的根节点替换为带有路由功能的<a href="https://reactrouter.com/en/main/routers/router-provider" target="_blank" rel="noopener noreferrer">RouterProvider</a>:</p><div class="language-tsx line-numbers-mode" data-highlighter="shiki" data-ext="tsx" data-title="tsx" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">root</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">render</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    &lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;">RouterProvider</span><span style="--shiki-light:#6F42C1;--shiki-dark:#D19A66;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> router</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#C678DD;">{</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">router</span><span style="--shiki-light:#24292E;--shiki-dark:#C678DD;">}</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">/&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="嵌套路由" tabindex="-1"><a class="header-anchor" href="#嵌套路由"><span>嵌套路由</span></a></h2><p>嵌套路由最典型的应用场景就是在多个页面中共享相同的布局,比如我们实现一个管理系统,可能会有一个<code>Sidebar</code>和<code>Header</code> 组件,这两个组件在所有页面中都是相同的,只有中间的内容不同.</p>`,8),k=a(`<ol><li>上面的例子中首先定义了一个全局布局组件<code>Layout.tsx</code></li></ol><div class="language-tsx line-numbers-mode" data-highlighter="shiki" data-ext="tsx" data-title="tsx" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> Layout</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> () </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> &lt;&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">        &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;这是一个共享的布局&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">        &lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;">Outlet</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">/&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    &lt;/&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>这个组件中有一个<code>&lt;Outlet /&gt;</code>组件,它是<code>react-router-dom</code>用来渲染子路由对应组件的占位符.</li><li>然后定义了一个<code>Dashboard</code>组件,它是<code>Layout</code>的子组件,并且是<code>Layout</code>的默认子组件,即<code>/</code>路径对应的组件.</li></ol><p>下面这张图解释了用户输入<code>/dashboard</code>时的渲染过程:</p><figure><img src="https://cdn.jsdelivr.net/gh/hhypygy/picx-images-hosting@master/嵌套路由渲染流程.3wwe1fls9pq0.svg" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><iframe src="https://remix.run/_docs/routing" style="width:100%;height:500px;border:0;border-radius:4px;overflow:hidden;"></iframe>`,6);function o(c,g){const s=n("SandPack");return l(),r("div",null,[d,e(s,{theme:"dark",title:"React-Router%20%E7%A4%BA%E4%BE%8B%20",template:"react-ts",files:"eJztU71u1EAQfpXVNvFJxtsfPksxQgIpSNGlZCmMPQlW1run9TpcZLmjoaDiQSip4G1O4jGY/XGwrUtAkejiZn9m5vN8833bU1bLCvaJafd0Tetmp7QhWyhKE5P+wui6NG9UBQO51KohnGob4vQ5lyG3L/HKwFYpM096VqmGlaIGOcvnNGGtuRXQJmXbzpC4JPh5vFyrjy3oreoM6NhH/OFcq5u6ml+G/Vktr8O2a+FMlYWpleRy0Zh2OLa/6e9Pd7sxLWF4mMbOiys4/RN1x2U8n8dzF+eyVLI1xP+SbI6xi976lgN/++0K82GNUIzTwMd+IKDBaa5Jiu2xLESGsB4r3/lGj2I4EhOUewGQyb0A+ayNdyukPBJW5o6uNUdUqbKzlckVmJceJL99XUWoCoY5Xdliu000oCV15HHTuephkpverwPLuLSFNKZWtLmPe3TBi0KI90V5HZMGGhVbY1wY7OkBR0+8EztPhdyTpX1OnMKwd2UVXBadMCRakU02DlOAISJg4TgmyJHt2qZoMJ2WJEUi44zTqr7JDj++Hj5/+fX92+HnpzXpR5TEaiOLBoaU2bRJVScmJ3cj6iy1BIhRG06DGzK3pswGlgUMK/6KgYZwGHnAWFSl7K6RlGXIcvDyOMM9CfTAcPG5Z69UA4/UZnytjxUnfxLnP4uzfH3/Is7wG+hfdw0=",options:"eJyrrgUAAXUA+Q==",customSetup:"eJyrVkpJLUjNS0nNS85MLVayqlYqSk1MLtEtyi8tSS3STcnPVbJSijPTMzLSM1CqrQUAl0sP5g=="}),p,e(s,{theme:"dark",title:"React-Router%20%E7%A4%BA%E4%BE%8B%20",template:"react-ts",files:"eJx9UktOwzAQvYrlVSu1ZA9JJL4rJBBsvXGTqRqR2JE9KUVRpErAHYAjwAJ1V7HhMi1wDBwnbV0EeBPHb968N88uqbef5zuoJ3SXJlkuFZKy0HDI03TAo6seySCTPWKOLpEjVGSoZEYYVcAjZHSPiRWLCWJWZACEAyWvNagLWSConovYI31imhynkIFA3cIWcPfqXMlxEq/5ZwWmgExsW+grW9uPZWbdMBFJoZGc8hsDkIB0uiQIV+4UYKEE8cPmt15+nIzDr/fHj4fXxXy6mD8v72eLt5fPp7vl/HY5m/peXeDUNz689sivN9VG94jr0UByFf8l/VNuTVgJOc2a2UynX1Lt/J9qC1uLFiU5x1HAqMcogaYoKP0mJi+snAkdTiJimDjla7OGUQ/uiHiW0bbpMtE1lwET+zRiGPIixU0e24ls33Y7dFA2XyNjGplMaPUNVR/y6Q==",options:"eJyrrgUAAXUA+Q==",customSetup:"eJyrVkpJLUjNS0nNS85MLVayqlYqSk1MLtEtyi8tSS3STcnPVbJSijPTMzLSM1CqrQUAl0sP5g=="}),k])}const y=t(h,[["render",o],["__file","简介.html.vue"]]),m=JSON.parse('{"path":"/Programming/Frontend/ReactLibs/%E8%B7%AF%E7%94%B1%E7%B3%BB%E7%BB%9F/React%20Router%20Dom/%E7%AE%80%E4%BB%8B.html","title":"简介","lang":"zh-CN","frontmatter":{"title":"简介","comment":false,"editLink":false,"prev":false,"next":false,"order":1,"description":"简单的示例 上面的代码首先在index.tsx中定义了三个路由: 页面链接和渲染的组件的关系如下: 然后将整个SPA 应用的根节点替换为带有路由功能的RouterProvider: 嵌套路由 嵌套路由最典型的应用场景就是在多个页面中共享相同的布局,比如我们实现一个管理系统,可能会有一个Sidebar和Header 组件,这两个组件在所有页面中都是相同的...","head":[["meta",{"property":"og:url","content":"https://vuepress-theme-hope-docs-demo.netlify.app/Programming/Frontend/ReactLibs/%E8%B7%AF%E7%94%B1%E7%B3%BB%E7%BB%9F/React%20Router%20Dom/%E7%AE%80%E4%BB%8B.html"}],["meta",{"property":"og:site_name","content":"一星的臭弟弟"}],["meta",{"property":"og:title","content":"简介"}],["meta",{"property":"og:description","content":"简单的示例 上面的代码首先在index.tsx中定义了三个路由: 页面链接和渲染的组件的关系如下: 然后将整个SPA 应用的根节点替换为带有路由功能的RouterProvider: 嵌套路由 嵌套路由最典型的应用场景就是在多个页面中共享相同的布局,比如我们实现一个管理系统,可能会有一个Sidebar和Header 组件,这两个组件在所有页面中都是相同的..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://cdn.jsdelivr.net/gh/hhypygy/picx-images-hosting@master/嵌套路由渲染流程.3wwe1fls9pq0.svg"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-07-03T23:01:39.000Z"}],["meta",{"property":"article:author","content":"Cruldra"}],["meta",{"property":"article:modified_time","content":"2024-07-03T23:01:39.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"简介\\",\\"image\\":[\\"https://cdn.jsdelivr.net/gh/hhypygy/picx-images-hosting@master/嵌套路由渲染流程.3wwe1fls9pq0.svg\\"],\\"dateModified\\":\\"2024-07-03T23:01:39.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Cruldra\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":2,"title":"简单的示例","slug":"简单的示例","link":"#简单的示例","children":[]},{"level":2,"title":"嵌套路由","slug":"嵌套路由","link":"#嵌套路由","children":[]}],"git":{"createdTime":1720047699000,"updatedTime":1720047699000,"contributors":[{"name":"cruldra","email":"cruldra@gmail.com","commits":1}]},"readingTime":{"minutes":2.16,"words":649},"filePathRelative":"Programming/Frontend/ReactLibs/路由系统/React Router Dom/简介.md","localizedDate":"2024年7月3日","autoDesc":true}');export{y as comp,m as data};
