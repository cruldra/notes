import{_ as i,o as e,c as s,e as a}from"./app-Bmelea3n.js";const t={},l=a(`<h2 id="简介" tabindex="-1"><a class="header-anchor" href="#简介"><span>简介</span></a></h2><p><a href="https://cn.vuejs.org/guide/essentials/reactivity-fundamentals#ref" target="_blank" rel="noopener noreferrer"><code>ref</code></a>和<a href="https://cn.vuejs.org/guide/essentials/reactivity-fundamentals#reactive" target="_blank" rel="noopener noreferrer"><code>reactive</code></a>都是<code>Vue3</code>中的响应式API,它们的作用是将普通对象转换为响应式对象.</p><h2 id="ref" tabindex="-1"><a class="header-anchor" href="#ref"><span>ref</span></a></h2><ul><li><code>ref</code>用于使任何类型的变量变成响应式的,包括基本数据类型(如字符串、数字等)和对象.</li><li>当使用<code>ref</code>包装基本数据类型时,需要通过<code>.value</code>属性来访问或修改它的值.</li><li><code>ref</code>接收的值会被包装在一个带有<code>value</code>属性的对象中,这个对象是响应式的.</li><li><code>ref</code>通常用于模板中,并且在模板中访问时无需使用<code>.value</code>.</li></ul><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> { </span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">ref</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> } </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> &#39;vue&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;"> count</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> ref</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">console</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">count</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">value</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">); </span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">// 0</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">count</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">value</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="reactive" tabindex="-1"><a class="header-anchor" href="#reactive"><span>reactive</span></a></h2><ul><li><code>reactive</code>用于创建响应式的对象.</li><li>传递给<code>reactive</code>的对象可以直接修改其属性,而不需要像<code>ref</code>那样使用<code>.value</code>属性.</li><li><code>reactive</code>返回的是原始对象的响应式代理,因此它保留了对象的结构和原型.</li><li>当你需要创建一个响应式的复杂对象或数组时,通常使用<code>reactive</code>.</li></ul><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> { </span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">reactive</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> } </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> &#39;vue&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;"> state</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> reactive</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">({ </span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">count</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> });</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">state</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">count</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="使用场景" tabindex="-1"><a class="header-anchor" href="#使用场景"><span>使用场景</span></a></h2><ul><li>当你要处理基本数据类型时,用<code>ref</code>.</li><li>当你要处理对象或数组时,用<code>reactive</code>.</li><li>如果你有一个由多个基本类型值组成的复杂状态,可以使用<code>reactive</code>来包裹一个对象,而不是为每个基本类型值使用ref.</li></ul>`,10),n=[l];function r(h,d){return e(),s("div",null,n)}const k=i(t,[["render",r],["__file","响应式变量.html.vue"]]),c=JSON.parse('{"path":"/Programming/Frontend/Vue/%E5%93%8D%E5%BA%94%E5%BC%8F%E5%8F%98%E9%87%8F.html","title":"响应式变量","lang":"zh-CN","frontmatter":{"title":"响应式变量","comment":false,"editLink":false,"prev":false,"next":false,"description":"简介 ref和reactive都是Vue3中的响应式API,它们的作用是将普通对象转换为响应式对象. ref ref用于使任何类型的变量变成响应式的,包括基本数据类型(如字符串、数字等)和对象. 当使用ref包装基本数据类型时,需要通过.value属性来访问或修改它的值. ref接收的值会被包装在一个带有value属性的对象中,这个对象是响应式的. r...","head":[["meta",{"property":"og:url","content":"https://vuepress-theme-hope-docs-demo.netlify.app/Programming/Frontend/Vue/%E5%93%8D%E5%BA%94%E5%BC%8F%E5%8F%98%E9%87%8F.html"}],["meta",{"property":"og:site_name","content":"一星的臭弟弟"}],["meta",{"property":"og:title","content":"响应式变量"}],["meta",{"property":"og:description","content":"简介 ref和reactive都是Vue3中的响应式API,它们的作用是将普通对象转换为响应式对象. ref ref用于使任何类型的变量变成响应式的,包括基本数据类型(如字符串、数字等)和对象. 当使用ref包装基本数据类型时,需要通过.value属性来访问或修改它的值. ref接收的值会被包装在一个带有value属性的对象中,这个对象是响应式的. r..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-07-03T23:01:39.000Z"}],["meta",{"property":"article:author","content":"Cruldra"}],["meta",{"property":"article:modified_time","content":"2024-07-03T23:01:39.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"响应式变量\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-07-03T23:01:39.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Cruldra\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":2,"title":"简介","slug":"简介","link":"#简介","children":[]},{"level":2,"title":"ref","slug":"ref","link":"#ref","children":[]},{"level":2,"title":"reactive","slug":"reactive","link":"#reactive","children":[]},{"level":2,"title":"使用场景","slug":"使用场景","link":"#使用场景","children":[]}],"git":{"createdTime":1720047699000,"updatedTime":1720047699000,"contributors":[{"name":"cruldra","email":"cruldra@gmail.com","commits":1}]},"readingTime":{"minutes":1.27,"words":381},"filePathRelative":"Programming/Frontend/Vue/响应式变量.md","localizedDate":"2024年7月3日","autoDesc":true}');export{k as comp,c as data};
