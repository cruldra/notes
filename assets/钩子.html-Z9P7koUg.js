import{_ as s,r as t,o as a,c as l,a as n,b as i,d as o,w as h,e as d}from"./app-Bmelea3n.js";const c={},r=d(`<h2 id="简介" tabindex="-1"><a class="header-anchor" href="#简介"><span>简介</span></a></h2><p><code>Git</code><a href="https://git-scm.com/book/zh/v2/%E8%87%AA%E5%AE%9A%E4%B9%89-Git-Git-%E9%92%A9%E5%AD%90" target="_blank" rel="noopener noreferrer">钩子(Git Hooks)</a>是在<code>Git</code> 执行某些重要动作(如提交、推送、合并等)时触发的脚本.</p><p>这些脚本由<code>Git</code>在特定的操作发生前后自动执行,允许开发者<code>挂接(hook into)</code>自定义脚本进入<code>Git</code>工作流中.</p><p>利用<code>Git</code>钩子,可以在不同阶段自动化执行代码检查、格式化、测试等任务.</p><h2 id="钩子的种类" tabindex="-1"><a class="header-anchor" href="#钩子的种类"><span>钩子的种类</span></a></h2><p><code>Git</code>提供了两类钩子:</p><ol><li><strong>客户端钩子</strong>:在本地操作时触发,如提交(<code>pre-commit</code>,<code>commit-msg</code>,<code>post-commit</code>)和推送(<code>pre-push</code>).</li><li><strong>服务器端钩子</strong>:在服务器上接收到推送时触发,如在代码推送到远程仓库之后(<code>pre-receive</code>,<code>update</code>,<code>post-receive</code>).</li></ol><h3 id="客户端钩子" tabindex="-1"><a class="header-anchor" href="#客户端钩子"><span>客户端钩子</span></a></h3><ol><li><code>pre-commit</code>:在键入提交信息前运行,用于检查即将提交的快照,例如运行<code>linters</code>或测试.</li><li><code>commit-msg</code>:在提交信息编辑器显示给用户前运行,可以用来验证或标准化即将保存的提交信息.</li><li><code>post-commit</code>:在提交完成后运行,用作通知或进行其他后续操作.</li></ol><h3 id="服务器端钩子" tabindex="-1"><a class="header-anchor" href="#服务器端钩子"><span>服务器端钩子</span></a></h3><ol><li><code>pre-receive</code>:在推送到仓库之前运行,用于检查接收的更新,并可能拒绝推送.</li><li><code>post-receive</code>:在接收推送后运行,用于通知或进行其他后续操作.</li><li><code>pre-push</code>:在推送之前运行,用于检查推送的内容,例如检查提交是否符合规范.</li><li><code>post-rewrite</code>:在重写历史时运行,用于通知或进行其他后续操作.</li></ol><h2 id="钩子的使用" tabindex="-1"><a class="header-anchor" href="#钩子的使用"><span>钩子的使用</span></a></h2><p>钩子脚本位于<code>.git/hooks</code>目录下,这个目录下有一些示例脚本,但它们默认是禁用的,要启用它们,需要将它们的文件名中的<code>.sample</code> 后缀去掉.</p><h3 id="commit-msg钩子示例" tabindex="-1"><a class="header-anchor" href="#commit-msg钩子示例"><span><code>commit-msg</code>钩子示例</span></a></h3><p>这里实现了一个简单的钩子来展示钩子如何被创建、安装及运行,这个钩子在提交前检查提交的消息中是否包含<code>hello</code>字符串:</p><ol><li>在你的<code>Git</code>仓库的<code>.git/hooks/</code>目录下创建一个名为<code>commit-msg</code>的文件.</li><li>编写脚本来检查提交消息文件中是否有<code>hello</code>.</li></ol><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">#!/bin/sh</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"># commit-msg hook</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"># 捕获提交消息文件的路径</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">COMMIT_MSG_FILE</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">$1</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"># 检查提交消息中是否包含 &quot;hello&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">if</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> grep</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> -iq</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> &quot;hello&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> &quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">$COMMIT_MSG_FILE</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">; </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">then</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">    # 如果包含 &quot;hello&quot;，允许提交</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2;">    exit</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 0</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">else</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">    # 如果不包含 &quot;hello&quot;，拒绝提交并给出提示</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2;">    echo</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> &quot;ERROR: Commit message does not contain &#39;hello&#39;.&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#ABB2BF;"> &gt;&amp;2</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2;">    exit</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 1</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">fi</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li>保存脚本并给予其执行权限.</li></ol><p>现在,每当你尝试执行<code>git commit</code>时,这个钩子就会被触发并检查你的提交消息.如果消息中不包含<code>hello</code> ,它将阻止提交并打印一条错误消息,否则提交将继续,如图:</p><figure><img src="https://cdn.jsdelivr.net/gh/hhypygy/picx-images-hosting@master/image.8vmndsx39w.webp" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="管理钩子" tabindex="-1"><a class="header-anchor" href="#管理钩子"><span>管理钩子</span></a></h2>`,21);function p(k,m){const e=t("RouteLink");return a(),l("div",null,[r,n("p",null,[i("使用钩子可能会导致一些额外的工作,比如编写脚本、添加脚本权限、兼容不同的平台以及团队协作等,有些工具可以帮助我们简化钩子的管理,比如"),o(e,{to:"/Programming/Frontend/DevBuildRelease/Husky.html"},{default:h(()=>[i("Husky")]),_:1})])])}const u=s(c,[["render",p],["__file","钩子.html.vue"]]),y=JSON.parse('{"path":"/Tools/Git/%E9%92%A9%E5%AD%90.html","title":"钩子","lang":"zh-CN","frontmatter":{"title":"钩子","comment":false,"editLink":false,"prev":false,"next":false,"description":"简介 Git钩子(Git Hooks)是在Git 执行某些重要动作(如提交、推送、合并等)时触发的脚本. 这些脚本由Git在特定的操作发生前后自动执行,允许开发者挂接(hook into)自定义脚本进入Git工作流中. 利用Git钩子,可以在不同阶段自动化执行代码检查、格式化、测试等任务. 钩子的种类 Git提供了两类钩子: 客户端钩子:在本地操作时触...","head":[["meta",{"property":"og:url","content":"https://vuepress-theme-hope-docs-demo.netlify.app/Tools/Git/%E9%92%A9%E5%AD%90.html"}],["meta",{"property":"og:site_name","content":"一星的臭弟弟"}],["meta",{"property":"og:title","content":"钩子"}],["meta",{"property":"og:description","content":"简介 Git钩子(Git Hooks)是在Git 执行某些重要动作(如提交、推送、合并等)时触发的脚本. 这些脚本由Git在特定的操作发生前后自动执行,允许开发者挂接(hook into)自定义脚本进入Git工作流中. 利用Git钩子,可以在不同阶段自动化执行代码检查、格式化、测试等任务. 钩子的种类 Git提供了两类钩子: 客户端钩子:在本地操作时触..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://cdn.jsdelivr.net/gh/hhypygy/picx-images-hosting@master/image.8vmndsx39w.webp"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-07-03T23:01:39.000Z"}],["meta",{"property":"article:author","content":"Cruldra"}],["meta",{"property":"article:modified_time","content":"2024-07-03T23:01:39.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"钩子\\",\\"image\\":[\\"https://cdn.jsdelivr.net/gh/hhypygy/picx-images-hosting@master/image.8vmndsx39w.webp\\"],\\"dateModified\\":\\"2024-07-03T23:01:39.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Cruldra\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":2,"title":"简介","slug":"简介","link":"#简介","children":[]},{"level":2,"title":"钩子的种类","slug":"钩子的种类","link":"#钩子的种类","children":[{"level":3,"title":"客户端钩子","slug":"客户端钩子","link":"#客户端钩子","children":[]},{"level":3,"title":"服务器端钩子","slug":"服务器端钩子","link":"#服务器端钩子","children":[]}]},{"level":2,"title":"钩子的使用","slug":"钩子的使用","link":"#钩子的使用","children":[{"level":3,"title":"commit-msg钩子示例","slug":"commit-msg钩子示例","link":"#commit-msg钩子示例","children":[]}]},{"level":2,"title":"管理钩子","slug":"管理钩子","link":"#管理钩子","children":[]}],"git":{"createdTime":1720047699000,"updatedTime":1720047699000,"contributors":[{"name":"cruldra","email":"cruldra@gmail.com","commits":1}]},"readingTime":{"minutes":2.74,"words":821},"filePathRelative":"Tools/Git/钩子.md","localizedDate":"2024年7月3日","autoDesc":true}');export{u as comp,y as data};
